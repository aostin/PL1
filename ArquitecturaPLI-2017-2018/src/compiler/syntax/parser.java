
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 12 13:43:13 CET 2018
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 12 13:43:13 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\061\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\050\005\000\002\050\004\000\002\050\004\000\002" +
    "\050\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\004\000\002\046\006\000\002\046\010" +
    "\000\002\046\011\000\002\047\010\000\002\047\012\000" +
    "\002\047\013\000\002\051\006\000\002\052\004\000\002" +
    "\052\005\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\004" +
    "\000\002\053\011\000\002\053\007\000\002\054\011\000" +
    "\002\054\011\000\002\012\003\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\006\004\000\002\013\004" +
    "\000\002\013\003\000\002\014\006\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\056\003\000\002" +
    "\056\003\000\002\007\004\000\002\015\003\000\002\015" +
    "\004\000\002\016\015\000\002\022\003\000\002\022\003" +
    "\000\002\010\004\000\002\020\004\000\002\020\005\000" +
    "\002\017\005\000\002\017\005\000\002\023\003\000\002" +
    "\023\003\000\002\027\005\000\002\027\007\000\002\027" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\030\006\000\002\030\005\000" +
    "\002\031\006\000\002\031\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\032\006\000\002\032\006\000\002\034\003\000" +
    "\002\034\005\000\002\034\003\000\002\033\006\000\002" +
    "\033\010\000\002\045\003\000\002\045\005\000\002\045" +
    "\006\000\002\041\006\000\002\035\004\000\002\035\005" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\036\006\000\002" +
    "\036\006\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\037\011\000\002\037\007\000\002\040\011" +
    "\000\002\040\011\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\006\000\002\044\006\000\002" +
    "\044\006\000\002\062\002\000\002\004\006\000\002\004" +
    "\005\000\002\035\004\000\002\063\002\000\002\035\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\003\000\024\000\001\002\000\004\002" +
    "\376\001\002\000\006\003\010\024\007\001\002\000\004" +
    "\002\uffff\001\002\000\004\044\373\001\002\000\004\044" +
    "\uff8c\001\002\000\014\012\025\014\027\030\016\036\022" +
    "\037\020\001\002\000\012\012\uffdd\030\uffdd\036\022\037" +
    "\020\001\002\000\006\012\ufff4\030\016\001\002\000\004" +
    "\012\025\001\002\000\006\012\uffda\030\uffda\001\002\000" +
    "\004\044\263\001\002\000\006\012\ufff3\030\016\001\002" +
    "\000\004\044\247\001\002\000\004\002\ufffe\001\002\000" +
    "\004\044\227\001\002\000\006\012\025\030\016\001\002" +
    "\000\004\002\ufff9\001\002\000\016\021\044\022\050\041" +
    "\047\042\062\043\045\044\053\001\002\000\010\012\uffdc" +
    "\030\uffdc\037\020\001\002\000\004\044\030\001\002\000" +
    "\004\007\034\001\002\000\012\012\uffd6\030\uffd6\036\uffd6" +
    "\037\uffd6\001\002\000\014\012\uffd4\030\uffd4\036\uffd4\037" +
    "\uffd4\044\030\001\002\000\012\012\uffd5\030\uffd5\036\uffd5" +
    "\037\uffd5\001\002\000\010\020\040\035\036\045\035\001" +
    "\002\000\034\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\027\uffd0\033\uffd0\034\uffd0\050\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\001\002\000\034\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\027\uffd2\033\uffd2\034\uffd2\050" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\001\002\000\004\054\041" +
    "\001\002\000\034\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\027\uffd1\033\uffd1\034\uffd1\050\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\001\002\000\014\012\uffd3\030\uffd3\036" +
    "\uffd3\037\uffd3\044\uffd3\001\002\000\006\012\uffd8\030\uffd8" +
    "\001\002\000\006\003\uffa0\054\uffa0\001\002\000\004\044" +
    "\211\001\002\000\006\003\uff90\054\uff90\001\002\000\004" +
    "\055\206\001\002\000\004\047\203\001\002\000\016\020" +
    "\040\035\036\044\153\045\035\047\132\051\133\001\002" +
    "\000\006\003\uff9c\054\uff9c\001\002\000\006\003\uff9d\054" +
    "\uff9d\001\002\000\014\003\uffa6\047\100\051\101\054\uffa6" +
    "\055\077\001\002\000\006\003\uff92\054\uff92\001\002\000" +
    "\006\003\uff9f\054\uff9f\001\002\000\006\003\uff9e\054\uff9e" +
    "\001\002\000\006\003\072\054\073\001\002\000\004\017" +
    "\070\001\002\000\006\003\uff91\054\uff91\001\002\000\004" +
    "\047\063\001\002\000\006\044\064\045\065\001\002\000" +
    "\004\050\067\001\002\000\004\050\066\001\002\000\006" +
    "\003\uff8d\054\uff8d\001\002\000\006\003\uff8e\054\uff8e\001" +
    "\002\000\004\054\071\001\002\000\004\002\uffa3\001\002" +
    "\000\022\016\uff89\017\uff89\021\uff88\022\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\001\002\000\022\016\uffa2\017\uffa2" +
    "\021\044\022\050\041\047\042\062\043\045\044\053\001" +
    "\002\000\006\016\uffa1\017\uffa1\001\002\000\016\021\044" +
    "\022\050\041\047\042\062\043\045\044\053\001\002\000" +
    "\006\016\uff87\017\uff87\001\002\000\004\007\130\001\002" +
    "\000\014\020\040\035\036\044\112\045\035\050\114\001" +
    "\002\000\006\044\102\045\103\001\002\000\004\052\105" +
    "\001\002\000\004\052\104\001\002\000\036\003\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\027\uffad\033\uffad" +
    "\034\uffad\050\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001" +
    "\002\000\036\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\027\uffac\033\uffac\034\uffac\050\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\001\002\000\034\003\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\027\uffcf\033\uffcf\034" +
    "\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\006" +
    "\050\uffab\053\126\001\002\000\034\003\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\027\uffae\033\uffae\034\uffae" +
    "\050\uffae\052\uffae\053\uffae\054\uffae\001\002\000\004\050" +
    "\uffa9\001\002\000\034\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\027\uffce\034\uffce\047\117\050\uffce\051" +
    "\101\053\uffce\054\uffce\001\002\000\034\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\027\uffaf\033\uffaf\034" +
    "\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\001\002\000\006" +
    "\003\uffa5\054\uffa5\001\002\000\004\050\116\001\002\000" +
    "\006\003\uffa4\054\uffa4\001\002\000\012\020\040\035\036" +
    "\044\112\045\035\001\002\000\006\050\uffa9\053\123\001" +
    "\002\000\004\050\122\001\002\000\014\003\uffa8\034\uffa8" +
    "\050\uffa8\053\uffa8\054\uffa8\001\002\000\012\020\040\035" +
    "\036\044\112\045\035\001\002\000\004\050\125\001\002" +
    "\000\014\003\uffa7\034\uffa7\050\uffa7\053\uffa7\054\uffa7\001" +
    "\002\000\012\020\040\035\036\044\112\045\035\001\002" +
    "\000\004\050\uffaa\001\002\000\016\020\040\035\036\044" +
    "\112\045\035\047\132\051\133\001\002\000\032\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\027\uffbd\033" +
    "\uffbd\034\uffbd\050\uffbd\052\uffbd\054\uffbd\001\002\000\016" +
    "\020\040\035\036\044\153\045\035\047\132\051\133\001" +
    "\002\000\016\020\040\035\036\044\153\045\035\047\132" +
    "\051\133\001\002\000\010\003\uff98\034\uff98\054\uff98\001" +
    "\002\000\016\004\146\005\150\006\147\007\145\010\144" +
    "\027\151\001\002\000\024\003\uff97\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\027\uffaf\034\uff97\054\uff97\001\002" +
    "\000\024\003\uff99\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\027\uffbc\034\uff99\054\uff99\001\002\000\010\003\uff9b" +
    "\034\uff9b\054\uff9b\001\002\000\032\003\uffba\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\027\uffba\033\uffba\034\uffba" +
    "\050\uffba\052\uffba\054\uffba\001\002\000\032\003\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\027\uffbb\033\uffbb" +
    "\034\uffbb\050\uffbb\052\uffbb\054\uffbb\001\002\000\016\020" +
    "\040\035\036\044\153\045\035\047\132\051\133\001\002" +
    "\000\020\020\uffb4\035\uffb4\044\uffb4\045\uffb4\047\uffb4\051" +
    "\uffb4\052\uffb4\001\002\000\020\020\uffb0\035\uffb0\044\uffb0" +
    "\045\uffb0\047\uffb0\051\uffb0\052\uffb0\001\002\000\020\020" +
    "\uffb3\035\uffb3\044\uffb3\045\uffb3\047\uffb3\051\uffb3\052\uffb3" +
    "\001\002\000\020\020\uffb1\035\uffb1\044\uffb1\045\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\001\002\000\020\020\uffb5\035\uffb5" +
    "\044\uffb5\045\uffb5\047\uffb5\051\uffb5\052\uffb5\001\002\000" +
    "\020\020\uffb2\035\uffb2\044\uffb2\045\uffb2\047\uffb2\051\uffb2" +
    "\052\uffb2\001\002\000\032\003\uffc0\004\146\005\150\006" +
    "\147\007\145\010\144\027\151\033\uffc0\034\uffc0\050\uffc0" +
    "\052\uffc0\054\uffc0\001\002\000\034\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\027\uffce\033\uffce\034\uffce" +
    "\050\uffce\051\101\052\uffce\054\uffce\001\002\000\032\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\027\uffbc" +
    "\033\uffbc\034\uffbc\050\uffbc\052\uffbc\054\uffbc\001\002\000" +
    "\020\004\146\005\150\006\147\007\145\010\144\027\151" +
    "\052\162\001\002\000\034\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\020\040\027\uffba\035\036\044\153\045\035" +
    "\047\132\051\133\052\uffba\001\002\000\020\004\146\005" +
    "\150\006\147\007\145\010\144\027\151\052\160\001\002" +
    "\000\046\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\020\uffb7\027\uffb7\033\uffb7\034\uffb7\035\uffb7\044\uffb7" +
    "\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\001" +
    "\002\000\020\020\040\035\036\044\153\045\035\047\132" +
    "\051\133\052\163\001\002\000\046\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\020\uffb6\027\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\054\uffb6\001\002\000\032\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\027\uffbe\033\uffbe\034" +
    "\uffbe\050\uffbe\052\uffbe\054\uffbe\001\002\000\020\004\146" +
    "\005\150\006\147\007\145\010\144\027\151\050\171\001" +
    "\002\000\034\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\020\040\027\uffbb\035\036\044\153\045\035\047\132\050" +
    "\uffbb\051\133\001\002\000\020\004\146\005\150\006\147" +
    "\007\145\010\144\027\151\050\167\001\002\000\046\003" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\020\uffb9" +
    "\027\uffb9\033\uffb9\034\uffb9\035\uffb9\044\uffb9\045\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\001\002\000\016" +
    "\020\040\035\036\044\153\045\035\047\132\051\133\001" +
    "\002\000\046\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\020\uffb8\027\uffb8\033\uffb8\034\uffb8\035\uffb8\044" +
    "\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8" +
    "\001\002\000\020\004\146\005\150\006\147\007\145\010" +
    "\144\027\151\050\173\001\002\000\032\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\027\uffbf\033\uffbf\034" +
    "\uffbf\050\uffbf\052\uffbf\054\uffbf\001\002\000\020\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\027\uffbc\033\175\001" +
    "\002\000\016\021\044\022\050\041\047\042\062\043\045" +
    "\044\053\001\002\000\006\016\177\017\200\001\002\000" +
    "\016\021\044\022\050\041\047\042\062\043\045\044\053" +
    "\001\002\000\006\003\uff95\054\uff95\001\002\000\004\017" +
    "\202\001\002\000\006\003\uff96\054\uff96\001\002\000\004" +
    "\046\204\001\002\000\004\050\205\001\002\000\006\003" +
    "\uff8f\054\uff8f\001\002\000\004\007\207\001\002\000\016" +
    "\020\040\035\036\044\112\045\035\047\132\051\133\001" +
    "\002\000\010\003\uff9a\034\uff9a\054\uff9a\001\002\000\006" +
    "\051\101\055\077\001\002\000\004\034\213\001\002\000" +
    "\006\044\215\045\214\001\002\000\004\015\221\001\002" +
    "\000\004\015\216\001\002\000\016\021\044\022\050\041" +
    "\047\042\062\043\045\044\053\001\002\000\004\017\220" +
    "\001\002\000\006\003\uff94\054\uff94\001\002\000\016\021" +
    "\044\022\050\041\047\042\062\043\045\044\053\001\002" +
    "\000\004\017\223\001\002\000\006\003\uff93\054\uff93\001" +
    "\002\000\004\002\ufffb\001\002\000\004\012\025\001\002" +
    "\000\004\002\ufffc\001\002\000\004\007\233\001\002\000" +
    "\010\012\uffcd\030\uffcd\037\uffcd\001\002\000\012\012\uffcc" +
    "\030\uffcc\037\uffcc\044\227\001\002\000\010\012\uffcb\030" +
    "\uffcb\037\uffcb\001\002\000\004\011\234\001\002\000\004" +
    "\051\235\001\002\000\004\045\236\001\002\000\004\056" +
    "\237\001\002\000\004\045\240\001\002\000\004\052\241" +
    "\001\002\000\004\026\242\001\002\000\006\013\245\023" +
    "\243\001\002\000\004\054\uffc9\001\002\000\004\054\246" +
    "\001\002\000\004\054\uffc8\001\002\000\012\012\uffca\030" +
    "\uffca\037\uffca\044\uffca\001\002\000\006\053\254\055\255" +
    "\001\002\000\004\054\252\001\002\000\006\012\uffc7\030" +
    "\uffc7\001\002\000\012\012\uffc6\030\uffc6\044\247\050\uffc6" +
    "\001\002\000\010\012\uffc5\030\uffc5\050\uffc5\001\002\000" +
    "\004\044\247\001\002\000\010\013\245\023\243\044\256" +
    "\001\002\000\004\054\uffc2\001\002\000\004\054\uffc1\001" +
    "\002\000\004\054\uffc4\001\002\000\004\054\uffc3\001\002" +
    "\000\004\012\ufff1\001\002\000\010\047\265\054\266\055" +
    "\264\001\002\000\006\013\245\023\243\001\002\000\006" +
    "\044\247\050\341\001\002\000\014\012\273\014\027\030" +
    "\016\036\022\037\020\001\002\000\004\012\273\001\002" +
    "\000\006\012\ufff0\030\ufff0\001\002\000\006\012\ufff5\030" +
    "\ufff5\001\002\000\006\012\273\030\016\001\002\000\020" +
    "\021\275\022\277\032\303\041\047\042\062\043\045\044" +
    "\053\001\002\000\004\054\uffe7\001\002\000\004\044\211" +
    "\001\002\000\004\054\321\001\002\000\016\020\040\035" +
    "\036\044\153\045\035\047\132\051\133\001\002\000\004" +
    "\054\uffe4\001\002\000\004\054\uffe3\001\002\000\004\054" +
    "\uffe5\001\002\000\012\020\040\035\036\044\310\045\035" +
    "\001\002\000\004\054\uffe6\001\002\000\004\017\306\001" +
    "\002\000\004\054\307\001\002\000\006\012\uffea\030\uffea" +
    "\001\002\000\004\054\uffce\001\002\000\004\054\uffe2\001" +
    "\002\000\020\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\027\uffbc\033\313\001\002\000\020\021\275\022\277\032" +
    "\303\041\047\042\062\043\045\044\053\001\002\000\006" +
    "\016\315\017\316\001\002\000\020\021\275\022\277\032" +
    "\303\041\047\042\062\043\045\044\053\001\002\000\004" +
    "\054\uffe0\001\002\000\004\017\320\001\002\000\004\054" +
    "\uffe1\001\002\000\024\016\uffe9\017\uffe9\021\275\022\277" +
    "\032\303\041\047\042\062\043\045\044\053\001\002\000" +
    "\006\016\uffe8\017\uffe8\001\002\000\004\034\324\001\002" +
    "\000\006\044\326\045\325\001\002\000\004\015\332\001" +
    "\002\000\004\015\327\001\002\000\020\021\275\022\277" +
    "\032\303\041\047\042\062\043\045\044\053\001\002\000" +
    "\004\017\331\001\002\000\004\054\uffdf\001\002\000\020" +
    "\021\275\022\277\032\303\041\047\042\062\043\045\044" +
    "\053\001\002\000\004\017\334\001\002\000\004\054\uffde" +
    "\001\002\000\004\012\273\001\002\000\006\012\ufff7\030" +
    "\ufff7\001\002\000\006\012\ufff8\030\ufff8\001\002\000\006" +
    "\012\ufff6\030\ufff6\001\002\000\006\054\353\055\352\001" +
    "\002\000\004\050\343\001\002\000\006\054\345\055\344" +
    "\001\002\000\006\013\245\023\243\001\002\000\014\012" +
    "\273\014\027\030\016\036\022\037\020\001\002\000\006" +
    "\012\uffee\030\uffee\001\002\000\004\054\350\001\002\000" +
    "\014\012\273\014\027\030\016\036\022\037\020\001\002" +
    "\000\006\012\uffeb\030\uffeb\001\002\000\006\013\245\023" +
    "\243\001\002\000\014\012\273\014\027\030\016\036\022" +
    "\037\020\001\002\000\006\012\uffef\030\uffef\001\002\000" +
    "\004\054\356\001\002\000\014\012\273\014\027\030\016" +
    "\036\022\037\020\001\002\000\006\012\uffec\030\uffec\001" +
    "\002\000\004\054\361\001\002\000\014\012\273\014\027" +
    "\030\016\036\022\037\020\001\002\000\006\012\uffed\030" +
    "\uffed\001\002\000\004\002\ufffa\001\002\000\004\012\ufff2" +
    "\001\002\000\010\012\uffdb\030\uffdb\037\020\001\002\000" +
    "\006\012\uffd9\030\uffd9\001\002\000\006\012\uffd7\030\uffd7" +
    "\001\002\000\004\044\371\001\002\000\004\054\372\001" +
    "\002\000\014\012\uff8b\014\uff8b\030\uff8b\036\uff8b\037\uff8b" +
    "\001\002\000\006\003\374\054\375\001\002\000\014\012" +
    "\uff8a\014\uff8a\030\uff8a\036\uff8a\037\uff8a\001\002\000\014" +
    "\012\ufffd\014\ufffd\030\ufffd\036\ufffd\037\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\002\003\061\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\367\001\001\000\024\005" +
    "\020\006\011\007\025\010\014\011\013\012\022\041\023" +
    "\046\016\047\012\001\001\000\006\007\364\010\365\001" +
    "\001\000\010\011\363\046\016\047\012\001\001\000\004" +
    "\041\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\261\046\016\047\012\001\001\000\006\017\247" +
    "\020\250\001\001\000\002\001\001\000\006\015\227\016" +
    "\230\001\001\000\012\011\224\041\223\046\016\047\012" +
    "\001\001\000\002\001\001\000\026\032\045\035\057\036" +
    "\042\037\054\040\055\042\051\043\053\044\060\045\050" +
    "\057\056\001\001\000\004\010\041\001\001\000\006\013" +
    "\030\014\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\032\014\031\001\001\000\002\001\001\000" +
    "\004\021\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\045\036\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\105\024\134\026\130\027\173\030\141" +
    "\031\140\032\107\056\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\074\001\001\000\026\032\045\035\073\036\042\037" +
    "\054\040\055\042\051\043\053\044\060\045\050\057\056" +
    "\001\001\000\002\001\001\000\026\032\045\035\075\036" +
    "\042\037\054\040\055\042\051\043\053\044\060\045\050" +
    "\057\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\105\026\106\032\107\033\110\034\114\056\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\105\026\106\032" +
    "\107\033\117\034\120\056\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\105\026" +
    "\106\032\107\033\110\034\123\056\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\105\026\106\032" +
    "\107\033\110\034\126\056\112\001\001\000\002\001\001" +
    "\000\026\021\105\024\134\026\130\027\136\030\141\031" +
    "\140\032\107\033\133\055\137\056\135\001\001\000\002" +
    "\001\001\000\022\021\105\024\163\026\130\027\153\030" +
    "\164\031\140\032\107\056\112\001\001\000\022\021\105" +
    "\024\154\026\130\027\153\030\141\031\155\032\107\056" +
    "\112\001\001\000\002\001\001\000\004\025\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\105\024\151" +
    "\026\130\027\153\030\141\031\140\032\107\056\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\160\001\001\000\022\021\105\024\156\026" +
    "\130\027\153\030\141\031\140\032\107\056\112\001\001" +
    "\000\004\025\142\001\001\000\002\001\001\000\022\021" +
    "\105\024\151\026\130\027\153\030\141\031\140\032\107" +
    "\056\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\167\001\001\000\022\021\105\024\165\026\130" +
    "\027\153\030\141\031\140\032\107\056\112\001\001\000" +
    "\004\025\142\001\001\000\002\001\001\000\022\021\105" +
    "\024\171\026\130\027\153\030\141\031\140\032\107\056" +
    "\112\001\001\000\002\001\001\000\004\025\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\032\045\035" +
    "\175\036\042\037\054\040\055\042\051\043\053\044\060" +
    "\045\050\057\056\001\001\000\002\001\001\000\026\032" +
    "\045\035\200\036\042\037\054\040\055\042\051\043\053" +
    "\044\060\045\050\057\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\021" +
    "\105\024\134\026\130\027\136\030\141\031\140\032\107" +
    "\033\133\055\207\056\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\045\035\216\036" +
    "\042\037\054\040\055\042\051\043\053\044\060\045\050" +
    "\057\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\032\045\035\221\036\042\037\054\040\055\042\051" +
    "\043\053\044\060\045\050\057\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\231\016\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\247\020\252\001\001\000\002\001\001\000\004\017\260" +
    "\001\001\000\006\022\256\023\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\357\001" +
    "\001\000\006\017\247\020\341\001\001\000\024\006\011" +
    "\007\025\010\014\011\266\012\271\046\016\047\012\050" +
    "\267\051\270\001\001\000\004\051\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\334\046\016\047" +
    "\012\051\335\001\001\000\026\032\045\036\273\042\277" +
    "\043\053\044\060\045\300\052\304\053\303\054\301\060" +
    "\275\001\001\000\002\001\001\000\006\032\045\036\322" +
    "\001\001\000\002\001\001\000\022\021\105\024\134\026" +
    "\130\027\311\030\141\031\140\032\107\056\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\105\056\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\032\045" +
    "\036\273\042\277\043\053\044\060\045\300\052\313\053" +
    "\303\054\301\060\275\001\001\000\002\001\001\000\026" +
    "\032\045\036\273\042\277\043\053\044\060\045\300\052" +
    "\316\053\303\054\301\060\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\032\045\036" +
    "\273\042\277\043\053\044\060\045\300\052\321\053\303" +
    "\054\301\060\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\032\045\036\273\042\277\043\053\044\060\045" +
    "\300\052\327\053\303\054\301\060\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\045\036\273\042" +
    "\277\043\053\044\060\045\300\052\332\053\303\054\301" +
    "\060\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\346\001\001\000\024\006\011" +
    "\007\025\010\014\011\266\012\271\046\016\047\012\050" +
    "\345\051\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\011\007\025\010\014\011\266\012\271\046" +
    "\016\047\012\050\350\051\270\001\001\000\002\001\001" +
    "\000\004\022\354\001\001\000\024\006\011\007\025\010" +
    "\014\011\266\012\271\046\016\047\012\050\353\051\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\011\007\025\010\014\011\266\012\271\046\016\047\012" +
    "\050\356\051\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\011\007\025\010\014\011\266\012\271" +
    "\046\016\047\012\050\361\051\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= tipoSentencia error NT$2 sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Error, se espera el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= tipoSentencia error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error, se espera el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // principio ::= MODULE ID error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba el delimitador ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // principio ::= error NT$1 ID PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$1 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada MODULE"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // writeInt ::= WRITEINT APAREN CDIGITO CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // writeInt ::= WRITEINT APAREN ID CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // writeString ::= WRITESTRING APAREN CCADENA CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciasWrite ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciasWrite ::= writeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciasWrite ::= writeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciasIF ::= IF expresionCompuesta THEN sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciasIF ::= IF expresionCompuesta THEN sentencias ELSE sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valorSentencia ::= valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valorSentencia ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valorSentencia ::= expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL valorSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL valorSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipoSentencia ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipoSentencia ::= sentenciasWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipoSentencia ::= sentenciasFOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipoSentencia ::= sentenciasIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipoSentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencias ::= tipoSentencia PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias ::= tipoSentencia PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo ::= BEGIN sentencias END PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // llamadaProcedimiento ::= ID APAREN listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // llamadaProcedimiento ::= ID APAREN CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // llamadaProcedimiento ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llamadaFuncion ::= ID APAREN llamadaFuncion COMA listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // llamadaFuncion ::= ID APAREN listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaValores ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaValores ::= valorExpresion COMA listaValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaValores ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // accesoVector ::= ID ACOR ID CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // accesoVector ::= ID ACOR CDIGITO CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valorExpresion ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valorExpresion ::= valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // corchetes ::= ACOR expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // corchetes ::= ACOR corchetes expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parentesis ::= APAREN expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parentesis ::= APAREN parentesis expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= corchetes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionCompuesta ::= ACOR expresion operador CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionCompuesta ::= APAREN expresion operador expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionCompuesta ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipoDato ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipoDato ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracionVariable ::= ID COMA declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracionVariable ::= ID DOSPUNTOS tipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracionVariables ::= declaracionVariable PCOMA declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionVariables ::= declaracionVariable PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seccionVariables ::= VAR declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seccionTipos ::= TYPE declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valorSimple ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSimple",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valorSimple ::= valorConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSimple",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valorConstante ::= CDIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valorConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionConstante ::= ID IGUAL valorConstante PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionConstantes ::= declaracionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seccionConstantes ::= CONST declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaDeclaraciones ::= seccionConstantes seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaDeclaraciones ::= seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaDeclaraciones ::= seccionConstantes seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaDeclaraciones ::= seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaDeclaraciones ::= seccionConstantes seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaDeclaraciones ::= seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaDeclaraciones ::= seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO CDIGITO DO sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO ID DO sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma ELSE sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoSentenciaSubprograma ::= RETURN valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoSentenciaSubprograma ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoSentenciaSubprograma ::= sentenciasWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoSentenciaSubprograma ::= sentenciasFORSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoSentenciaSubprograma ::= sentenciasIFSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoSentenciaSubprograma ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciasSubprograma ::= tipoSentenciaSubprograma PCOMA sentenciasSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasSubprograma",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciasSubprograma ::= tipoSentenciaSubprograma PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasSubprograma",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoSubprograma ::= BEGIN sentenciasSubprograma END PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoSubprograma",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion ::= PROCEDURE ID APAREN declaracionVariables CPAREN DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= PROCEDURE ID APAREN CPAREN DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= PROCEDURE ID DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimiento ::= PROCEDURE ID APAREN declaracionVariables CPAREN PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimiento ::= PROCEDURE ID APAREN CPAREN PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimiento ::= PROCEDURE ID PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionSubprogramas ::= procedimiento seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionSubprogramas ::= funcion seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionSubprogramas ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccionSubprogramas ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subprograma ::= cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // subprograma ::= seccionSubprogramas cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subprograma ::= listaDeclaraciones cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // subprograma ::= listaDeclaraciones seccionSubprogramas cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // medio ::= cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // medio ::= seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // medio ::= listaDeclaraciones cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // medio ::= listaDeclaraciones seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principio ::= MODULE ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= principio medio 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

