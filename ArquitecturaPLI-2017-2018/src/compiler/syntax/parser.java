
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 22 12:54:14 CET 2017
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 22 12:54:14 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\054\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\052\006\000\002\052\010\000\002\052" +
    "\011\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\005\000\002\007\004\000\002\014\004\000\002" +
    "\014\003\000\002\015\006\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\010\004\000\002\016\003" +
    "\000\002\016\004\000\002\017\015\000\002\023\003\000" +
    "\002\023\003\000\002\011\004\000\002\021\004\000\002" +
    "\021\005\000\002\020\005\000\002\020\005\000\002\024" +
    "\003\000\002\024\003\000\002\032\005\000\002\032\007" +
    "\000\002\032\006\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\034\006\000\002" +
    "\034\005\000\002\035\006\000\002\035\005\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\036\006\000\002" +
    "\036\006\000\002\037\006\000\002\037\010\000\002\040" +
    "\003\000\002\040\005\000\002\040\003\000\002\051\004" +
    "\000\002\051\006\000\002\051\007\000\002\045\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\005\000\002" +
    "\041\005\000\002\041\004\000\002\041\005\000\002\041" +
    "\004\000\002\041\005\000\002\041\003\000\002\041\004" +
    "\000\002\042\006\000\002\042\006\000\002\042\006\000" +
    "\002\042\006\000\002\042\006\000\002\042\006\000\002" +
    "\042\006\000\002\042\006\000\002\043\011\000\002\043" +
    "\007\000\002\044\011\000\002\044\011\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\006\000" +
    "\002\050\006\000\002\050\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\024\000\001\002\000\004\002\312\001" +
    "\002\000\004\024\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\044\310\001\002\000\014\012\024\014\026\030" +
    "\015\036\021\037\017\001\002\000\012\012\ufff1\030\ufff1" +
    "\036\021\037\017\001\002\000\006\012\ufff8\030\015\001" +
    "\002\000\004\012\024\001\002\000\006\012\uffee\030\uffee" +
    "\001\002\000\004\044\270\001\002\000\006\012\ufff7\030" +
    "\015\001\002\000\004\044\254\001\002\000\004\002\ufffe" +
    "\001\002\000\004\044\234\001\002\000\006\012\024\030" +
    "\015\001\002\000\010\002\ufff9\012\ufff9\030\ufff9\001\002" +
    "\000\016\021\043\022\047\041\046\042\060\043\044\044" +
    "\052\001\002\000\010\012\ufff0\030\ufff0\037\017\001\002" +
    "\000\004\044\027\001\002\000\004\007\033\001\002\000" +
    "\012\012\uffea\030\uffea\036\uffea\037\uffea\001\002\000\014" +
    "\012\uffe8\030\uffe8\036\uffe8\037\uffe8\044\027\001\002\000" +
    "\012\012\uffe9\030\uffe9\036\uffe9\037\uffe9\001\002\000\010" +
    "\020\036\035\035\045\034\001\002\000\032\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\027\uffe4\033\uffe4\034\uffe4" +
    "\050\uffe4\052\uffe4\053\uffe4\054\uffe4\001\002\000\032\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\027\uffe6\033\uffe6" +
    "\034\uffe6\050\uffe6\052\uffe6\053\uffe6\054\uffe6\001\002\000" +
    "\032\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\027\uffe5" +
    "\033\uffe5\034\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\004\054\040\001\002\000\014\012\uffe7\030\uffe7" +
    "\036\uffe7\037\uffe7\044\uffe7\001\002\000\006\012\uffec\030" +
    "\uffec\001\002\000\004\054\227\001\002\000\004\044\214" +
    "\001\002\000\004\054\uff9f\001\002\000\004\055\206\001" +
    "\002\000\004\047\203\001\002\000\016\020\036\035\035" +
    "\044\143\045\034\047\105\051\107\001\002\000\004\054" +
    "\172\001\002\000\030\002\uffaf\012\uffaf\016\uffaf\017\uffaf" +
    "\021\043\022\047\030\uffaf\041\046\042\060\043\044\044" +
    "\052\001\002\000\012\047\072\051\075\054\074\055\073" +
    "\001\002\000\004\054\uffa1\001\002\000\004\054\070\001" +
    "\002\000\004\054\066\001\002\000\010\002\uffb8\012\uffb8" +
    "\030\uffb8\001\002\000\004\054\uffa0\001\002\000\004\047" +
    "\061\001\002\000\006\044\062\045\063\001\002\000\004" +
    "\050\065\001\002\000\004\050\064\001\002\000\004\054" +
    "\uff9c\001\002\000\004\054\uff9d\001\002\000\030\002\uffb3" +
    "\012\uffb3\016\uffb3\017\uffb3\021\043\022\047\030\uffb3\041" +
    "\046\042\060\043\044\044\052\001\002\000\014\002\uffb2" +
    "\012\uffb2\016\uffb2\017\uffb2\030\uffb2\001\002\000\030\002" +
    "\uffb6\012\uffb6\016\uffb6\017\uffb6\021\043\022\047\030\uffb6" +
    "\041\046\042\060\043\044\044\052\001\002\000\014\002" +
    "\uffb5\012\uffb5\016\uffb5\017\uffb5\030\uffb5\001\002\000\014" +
    "\020\036\035\035\044\122\045\034\050\164\001\002\000" +
    "\004\007\102\001\002\000\030\002\uffbb\012\uffbb\016\uffbb" +
    "\017\uffbb\021\uffbb\022\uffbb\030\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\001\002\000\006\044\077\045\076\001\002" +
    "\000\004\052\101\001\002\000\004\052\100\001\002\000" +
    "\034\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\027\uffc1" +
    "\033\uffc1\034\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\001\002\000\034\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\027\uffc2\033\uffc2\034\uffc2\050\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\001\002\000\016\020\036\035\035" +
    "\044\112\045\034\047\105\051\107\001\002\000\030\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\027\uffd3\033\uffd3" +
    "\034\uffd3\050\uffd3\052\uffd3\054\uffd3\001\002\000\022\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\027\uffc4\034\uffab" +
    "\054\uffab\001\002\000\016\020\036\035\035\044\143\045" +
    "\034\047\105\051\107\001\002\000\032\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\027\uffc3\033\uffc3\034\uffc3\050" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\001\002\000\016\020\036" +
    "\035\035\044\143\045\034\047\105\051\107\001\002\000" +
    "\016\004\136\005\140\006\137\007\135\010\134\027\141" +
    "\001\002\000\006\034\uffac\054\uffac\001\002\000\026\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\027\uffc5\034\uffaa" +
    "\047\116\051\075\054\uffaa\001\002\000\022\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\027\uffd2\034\uffad\054\uffad" +
    "\001\002\000\030\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\027\uffd0\033\uffd0\034\uffd0\050\uffd0\052\uffd0\054\uffd0" +
    "\001\002\000\030\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\027\uffd1\033\uffd1\034\uffd1\050\uffd1\052\uffd1\054\uffd1" +
    "\001\002\000\012\020\036\035\035\044\122\045\034\001" +
    "\002\000\006\050\uffbe\053\131\001\002\000\032\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\027\uffc4\033\uffc4\034" +
    "\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4\001\002\000\006" +
    "\050\uffbc\053\125\001\002\000\012\047\116\050\uffc5\051" +
    "\075\053\uffc5\001\002\000\004\050\124\001\002\000\012" +
    "\034\uffc0\050\uffc0\053\uffc0\054\uffc0\001\002\000\012\020" +
    "\036\035\035\044\122\045\034\001\002\000\004\050\uffbc" +
    "\001\002\000\004\050\130\001\002\000\012\034\uffbf\050" +
    "\uffbf\053\uffbf\054\uffbf\001\002\000\012\020\036\035\035" +
    "\044\122\045\034\001\002\000\004\050\uffbd\001\002\000" +
    "\016\020\036\035\035\044\143\045\034\047\105\051\107" +
    "\001\002\000\020\020\uffca\035\uffca\044\uffca\045\uffca\047" +
    "\uffca\051\uffca\052\uffca\001\002\000\020\020\uffc6\035\uffc6" +
    "\044\uffc6\045\uffc6\047\uffc6\051\uffc6\052\uffc6\001\002\000" +
    "\020\020\uffc9\035\uffc9\044\uffc9\045\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\001\002\000\020\020\uffc7\035\uffc7\044\uffc7\045" +
    "\uffc7\047\uffc7\051\uffc7\052\uffc7\001\002\000\020\020\uffcb" +
    "\035\uffcb\044\uffcb\045\uffcb\047\uffcb\051\uffcb\052\uffcb\001" +
    "\002\000\020\020\uffc8\035\uffc8\044\uffc8\045\uffc8\047\uffc8" +
    "\051\uffc8\052\uffc8\001\002\000\030\004\136\005\140\006" +
    "\137\007\135\010\134\027\141\033\uffd6\034\uffd6\050\uffd6" +
    "\052\uffd6\054\uffd6\001\002\000\032\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\027\uffc5\033\uffc5\034\uffc5\050\uffc5" +
    "\051\075\052\uffc5\054\uffc5\001\002\000\030\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\027\uffd2\033\uffd2\034\uffd2" +
    "\050\uffd2\052\uffd2\054\uffd2\001\002\000\020\004\136\005" +
    "\140\006\137\007\135\010\134\027\141\052\152\001\002" +
    "\000\034\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\020" +
    "\036\027\uffd0\035\035\044\143\045\034\047\105\051\107" +
    "\052\uffd0\001\002\000\020\004\136\005\140\006\137\007" +
    "\135\010\134\027\141\052\150\001\002\000\044\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\020\uffcd\027\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\054\uffcd\001\002\000\020\020\036\035" +
    "\035\044\143\045\034\047\105\051\107\052\153\001\002" +
    "\000\044\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\020" +
    "\uffcc\027\uffcc\033\uffcc\034\uffcc\035\uffcc\044\uffcc\045\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\001\002\000" +
    "\030\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\027\uffd4" +
    "\033\uffd4\034\uffd4\050\uffd4\052\uffd4\054\uffd4\001\002\000" +
    "\020\004\136\005\140\006\137\007\135\010\134\027\141" +
    "\050\161\001\002\000\034\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\020\036\027\uffd1\035\035\044\143\045\034" +
    "\047\105\050\uffd1\051\107\001\002\000\020\004\136\005" +
    "\140\006\137\007\135\010\134\027\141\050\157\001\002" +
    "\000\044\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\020" +
    "\uffcf\027\uffcf\033\uffcf\034\uffcf\035\uffcf\044\uffcf\045\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf\001\002\000" +
    "\016\020\036\035\035\044\143\045\034\047\105\051\107" +
    "\001\002\000\044\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\020\uffce\027\uffce\033\uffce\034\uffce\035\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\054\uffce\001" +
    "\002\000\020\004\136\005\140\006\137\007\135\010\134" +
    "\027\141\050\163\001\002\000\030\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\027\uffd5\033\uffd5\034\uffd5\050\uffd5" +
    "\052\uffd5\054\uffd5\001\002\000\004\054\170\001\002\000" +
    "\004\050\166\001\002\000\004\054\167\001\002\000\030" +
    "\002\uffb9\012\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\030" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\001\002\000\030" +
    "\002\uffba\012\uffba\016\uffba\017\uffba\021\uffba\022\uffba\030" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\001\002\000\014" +
    "\002\uffae\012\uffae\016\uffae\017\uffae\030\uffae\001\002\000" +
    "\030\002\uffb1\012\uffb1\016\uffb1\017\uffb1\021\043\022\047" +
    "\030\uffb1\041\046\042\060\043\044\044\052\001\002\000" +
    "\014\002\uffb0\012\uffb0\016\uffb0\017\uffb0\030\uffb0\001\002" +
    "\000\020\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\027" +
    "\uffd2\033\175\001\002\000\016\021\043\022\047\041\046" +
    "\042\060\043\044\044\052\001\002\000\006\016\177\017" +
    "\200\001\002\000\016\021\043\022\047\041\046\042\060" +
    "\043\044\044\052\001\002\000\004\054\uffa4\001\002\000" +
    "\004\017\202\001\002\000\004\054\uffa5\001\002\000\004" +
    "\046\204\001\002\000\004\050\205\001\002\000\004\054" +
    "\uff9e\001\002\000\004\007\207\001\002\000\016\020\036" +
    "\035\035\044\212\045\034\047\105\051\107\001\002\000" +
    "\022\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\027\uffc4" +
    "\034\uffa7\054\uffa7\001\002\000\006\034\uffa8\054\uffa8\001" +
    "\002\000\026\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\027\uffc5\034\uffa6\047\116\051\075\054\uffa6\001\002\000" +
    "\022\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\027\uffd2" +
    "\034\uffa9\054\uffa9\001\002\000\006\051\075\055\073\001" +
    "\002\000\004\034\216\001\002\000\006\044\217\045\220" +
    "\001\002\000\004\015\224\001\002\000\004\015\221\001" +
    "\002\000\016\021\043\022\047\041\046\042\060\043\044" +
    "\044\052\001\002\000\004\017\223\001\002\000\004\054" +
    "\uffa2\001\002\000\016\021\043\022\047\041\046\042\060" +
    "\043\044\044\052\001\002\000\004\017\226\001\002\000" +
    "\004\054\uffa3\001\002\000\030\002\uffb7\012\uffb7\016\uffb7" +
    "\017\uffb7\021\043\022\047\030\uffb7\041\046\042\060\043" +
    "\044\044\052\001\002\000\014\002\uffb4\012\uffb4\016\uffb4" +
    "\017\uffb4\030\uffb4\001\002\000\010\002\ufffb\012\ufffb\030" +
    "\ufffb\001\002\000\004\012\024\001\002\000\010\002\ufffc" +
    "\012\ufffc\030\ufffc\001\002\000\004\007\240\001\002\000" +
    "\010\012\uffe3\030\uffe3\037\uffe3\001\002\000\012\012\uffe2" +
    "\030\uffe2\037\uffe2\044\234\001\002\000\010\012\uffe1\030" +
    "\uffe1\037\uffe1\001\002\000\004\011\241\001\002\000\004" +
    "\051\242\001\002\000\004\045\243\001\002\000\004\056" +
    "\244\001\002\000\004\045\245\001\002\000\004\052\246" +
    "\001\002\000\004\026\247\001\002\000\006\013\252\023" +
    "\250\001\002\000\004\054\uffdf\001\002\000\004\054\253" +
    "\001\002\000\004\054\uffde\001\002\000\012\012\uffe0\030" +
    "\uffe0\037\uffe0\044\uffe0\001\002\000\006\053\261\055\262" +
    "\001\002\000\004\054\257\001\002\000\006\012\uffdd\030" +
    "\uffdd\001\002\000\012\012\uffdc\030\uffdc\044\254\050\uffdc" +
    "\001\002\000\010\012\uffdb\030\uffdb\050\uffdb\001\002\000" +
    "\004\044\254\001\002\000\010\013\252\023\250\044\263" +
    "\001\002\000\004\054\uffd8\001\002\000\004\054\uffd7\001" +
    "\002\000\004\054\uffda\001\002\000\004\054\uffd9\001\002" +
    "\000\004\012\ufff5\001\002\000\006\047\271\054\272\001" +
    "\002\000\006\044\254\050\274\001\002\000\014\012\024" +
    "\014\026\030\015\036\021\037\017\001\002\000\006\012" +
    "\ufff4\030\ufff4\001\002\000\004\054\301\001\002\000\004" +
    "\050\276\001\002\000\004\054\277\001\002\000\014\012" +
    "\024\014\026\030\015\036\021\037\017\001\002\000\006" +
    "\012\ufff2\030\ufff2\001\002\000\014\012\024\014\026\030" +
    "\015\036\021\037\017\001\002\000\006\012\ufff3\030\ufff3" +
    "\001\002\000\010\002\ufffa\012\ufffa\030\ufffa\001\002\000" +
    "\004\012\ufff6\001\002\000\010\012\uffef\030\uffef\037\017" +
    "\001\002\000\006\012\uffed\030\uffed\001\002\000\006\012" +
    "\uffeb\030\uffeb\001\002\000\004\054\311\001\002\000\014" +
    "\012\ufffd\014\ufffd\030\ufffd\036\ufffd\037\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\006\002\003\054\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\017\007\010\010\024\011" +
    "\013\012\012\013\021\045\022\052\015\053\011\001\001" +
    "\000\006\010\304\011\305\001\001\000\010\012\303\052" +
    "\015\053\011\001\001\000\004\045\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\266\052\015\053" +
    "\011\001\001\000\006\020\254\021\255\001\001\000\002" +
    "\001\001\000\006\016\234\017\235\001\001\000\012\012" +
    "\231\045\230\052\015\053\011\001\001\000\002\001\001" +
    "\000\024\036\044\041\055\042\041\043\053\044\054\046" +
    "\047\047\052\050\056\051\050\001\001\000\004\011\040" +
    "\001\001\000\006\014\027\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\031\015\030\001\001" +
    "\000\002\001\001\000\004\022\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\044\042\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\117\027\107\031" +
    "\102\032\173\034\114\035\113\036\105\001\001\000\002" +
    "\001\001\000\024\036\044\041\170\042\041\043\053\044" +
    "\054\046\047\047\052\050\056\051\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\044\041\066" +
    "\042\041\043\053\044\054\046\047\047\052\050\056\051" +
    "\050\001\001\000\002\001\001\000\024\036\044\041\070" +
    "\042\041\043\053\044\054\046\047\047\052\050\056\051" +
    "\050\001\001\000\002\001\001\000\014\022\117\031\116" +
    "\036\105\037\125\040\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\103\027\107\031\102\032\112\034\114\035\113\036\105" +
    "\037\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\117\027\153\031\102\032\143\034\154\035\113" +
    "\036\105\001\001\000\002\001\001\000\020\022\117\027" +
    "\144\031\102\032\143\034\114\035\145\036\105\001\001" +
    "\000\004\030\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\117\031\116\036\105\037\120\040\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\117\031\116\036\105\037\125\040\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\117\031\116\036\105\037\125\040\131\001\001" +
    "\000\002\001\001\000\020\022\117\027\141\031\102\032" +
    "\143\034\114\035\113\036\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\150\001" +
    "\001\000\020\022\117\027\146\031\102\032\143\034\114" +
    "\035\113\036\105\001\001\000\004\030\132\001\001\000" +
    "\002\001\001\000\020\022\117\027\141\031\102\032\143" +
    "\034\114\035\113\036\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\157\001\001\000\020\022\117" +
    "\027\155\031\102\032\143\034\114\035\113\036\105\001" +
    "\001\000\004\030\132\001\001\000\002\001\001\000\020" +
    "\022\117\027\161\031\102\032\143\034\114\035\113\036" +
    "\105\001\001\000\002\001\001\000\004\030\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\036\044\041\172\042\041\043\053\044" +
    "\054\046\047\047\052\050\056\051\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\036\044\041\175\042" +
    "\041\043\053\044\054\046\047\047\052\050\056\051\050" +
    "\001\001\000\002\001\001\000\024\036\044\041\200\042" +
    "\041\043\053\044\054\046\047\047\052\050\056\051\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\022\207\027\107\031\102\032" +
    "\212\034\114\035\113\036\105\037\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\044\041" +
    "\221\042\041\043\053\044\054\046\047\047\052\050\056" +
    "\051\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\036\044\041\224\042\041\043\053\044\054\046\047" +
    "\047\052\050\056\051\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\036\044\041\227\042\041\043\053" +
    "\044\054\046\047\047\052\050\056\051\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\236\017\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\254\021" +
    "\257\001\001\000\002\001\001\000\004\020\265\001\001" +
    "\000\006\023\263\024\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\254\021\274\001" +
    "\001\000\024\005\272\007\010\010\024\011\013\012\012" +
    "\013\021\045\022\052\015\053\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\277\007\010\010\024\011\013\012\012\013" +
    "\021\045\022\052\015\053\011\001\001\000\002\001\001" +
    "\000\024\005\301\007\010\010\024\011\013\012\012\013" +
    "\021\045\022\052\015\053\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // writeInt ::= WRITEINT APAREN CDIGITO CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // writeInt ::= WRITEINT APAREN ID CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // writeString ::= WRITESTRING APAREN CCADENA CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciasWrite ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciasWrite ::= writeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciasWrite ::= writeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciasIF ::= IF expresionCompuesta THEN sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciasIF ::= IF expresionCompuesta THEN sentencias ELSE sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL valorLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL valorLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencias ::= llamadaProcedimiento sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencias ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencias ::= sentenciasWrite PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencias ::= sentenciasWrite PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencias ::= sentenciasFOR PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencias ::= sentenciasFOR PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencias ::= sentenciaAsignacion PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencias ::= sentenciasIF PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencias ::= sentenciasIF PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= sentenciaAsignacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpo ::= BEGIN sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // llamadaProcedimiento ::= ID APAREN listaValores CPAREN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamadaProcedimiento ::= ID APAREN CPAREN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamadaProcedimiento ::= ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaValores ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaValores ::= valorExpresion COMA listaValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listaValores ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamadaFuncion ::= ID APAREN llamadaFuncion COMA listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamadaFuncion ::= ID APAREN listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // accesoVector ::= ID ACOR ID CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // accesoVector ::= ID ACOR CDIGITO CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valorExpresion ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valorExpresion ::= valorLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valorExpresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operador ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // corchetes ::= ACOR expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // corchetes ::= ACOR corchetes expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parentesis ::= APAREN expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parentesis ::= APAREN parentesis expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= corchetes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresionCompuesta ::= ACOR expresion operador CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresionCompuesta ::= APAREN expresion operador expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresionCompuesta ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoDato ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoDato ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionVariable ::= ID COMA declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionVariable ::= ID DOSPUNTOS tipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionVariables ::= declaracionVariable PCOMA declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionVariables ::= declaracionVariable PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seccionVariables ::= VAR declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionTipos ::= TYPE declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorLiteral ::= CDIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valorLiteral ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valorLiteral ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionConstante ::= ID IGUAL valorLiteral PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionConstantes ::= declaracionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantes ::= CONST declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaDeclaraciones ::= seccionConstantes seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaDeclaraciones ::= seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaDeclaraciones ::= seccionConstantes seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaDeclaraciones ::= seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaDeclaraciones ::= seccionConstantes seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaDeclaraciones ::= seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaDeclaraciones ::= seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimiento ::= PROCEDURE ID APAREN declaracionVariables CPAREN PCOMA medio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedimiento ::= PROCEDURE ID APAREN CPAREN PCOMA medio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedimiento ::= PROCEDURE ID PCOMA medio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionSubprogramas ::= procedimiento seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionSubprogramas ::= funcion seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionSubprogramas ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionSubprogramas ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // medio ::= cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // medio ::= seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // medio ::= listaDeclaraciones cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // medio ::= listaDeclaraciones seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("medio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principio ::= MODULE ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= principio medio 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

