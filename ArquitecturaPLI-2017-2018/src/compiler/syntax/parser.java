
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 18 18:41:08 CET 2018
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 18 18:41:08 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\002\002\004\000\002\061\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\050\005\000\002\050\004\000\002\050\004\000\002" +
    "\050\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\005\000\002\011\005\000\002\046\005\000\002\046\007" +
    "\000\002\046\007\000\002\047\007\000\002\047\011\000" +
    "\002\047\011\000\002\051\007\000\002\051\006\000\002" +
    "\052\004\000\002\052\005\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\004\000\002\053\011\000\002\053\007\000" +
    "\002\054\011\000\002\054\011\000\002\012\003\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\005\000\002\006\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\006\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\056\003\000\002\056\003\000\002\007\004\000\002\015" +
    "\003\000\002\015\004\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\022\003\000" +
    "\002\022\003\000\002\010\004\000\002\020\003\000\002" +
    "\020\004\000\002\017\006\000\002\017\006\000\002\017" +
    "\005\000\002\023\003\000\002\023\003\000\002\027\005" +
    "\000\002\027\007\000\002\027\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\030\006\000\002\030\005\000\002\031\006\000\002\031" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\034\003\000\002\034" +
    "\005\000\002\034\003\000\002\033\006\000\002\033\010" +
    "\000\002\045\003\000\002\045\005\000\002\045\006\000" +
    "\002\041\007\000\002\041\006\000\002\035\004\000\002" +
    "\035\005\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\036\006" +
    "\000\002\036\006\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\037\011\000\002\037\007\000\002" +
    "\040\011\000\002\040\011\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\043\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\062\002\000\002\004\006\000\002" +
    "\063\002\000\002\004\006\000\002\004\005\000\002\006" +
    "\004\000\002\064\002\000\002\014\007\000\002\065\002" +
    "\000\002\014\007\000\002\066\002\000\002\014\007\000" +
    "\002\067\002\000\002\014\010\000\002\070\002\000\002" +
    "\014\010\000\002\071\002\000\002\016\016\000\002\072" +
    "\002\000\002\016\016\000\002\073\002\000\002\016\016" +
    "\000\002\074\002\000\002\016\016\000\002\075\002\000" +
    "\002\016\016\000\002\076\002\000\002\016\015\000\002" +
    "\077\002\000\002\016\016\000\002\100\002\000\002\016" +
    "\016\000\002\101\002\000\002\016\016\000\002\102\002" +
    "\000\002\016\016\000\002\016\015\000\002\016\005\000" +
    "\002\016\005\000\002\103\002\000\002\017\005\000\002" +
    "\104\002\000\002\017\006\000\002\017\005\000\002\105" +
    "\002\000\002\017\011\000\002\017\006\000\002\035\004" +
    "\000\002\036\004\000\002\106\002\000\002\036\007\000" +
    "\002\107\002\000\002\036\007\000\002\110\002\000\002" +
    "\036\007\000\002\111\002\000\002\036\010\000\002\112" +
    "\002\000\002\036\007\000\002\113\002\000\002\036\007" +
    "\000\002\114\002\000\002\037\007\000\002\115\002\000" +
    "\002\037\010\000\002\037\010\000\002\037\012\000\002" +
    "\037\005\000\002\116\002\000\002\037\010\000\002\117" +
    "\002\000\002\037\010\000\002\120\002\000\002\037\012" +
    "\000\002\121\002\000\002\053\007\000\002\122\002\000" +
    "\002\053\010\000\002\053\010\000\002\053\012\000\002" +
    "\053\005\000\002\123\002\000\002\053\010\000\002\124" +
    "\002\000\002\053\010\000\002\125\002\000\002\053\012" +
    "\000\002\040\005\000\002\126\002\000\002\040\012\000" +
    "\002\127\002\000\002\040\012\000\002\130\002\000\002" +
    "\040\012\000\002\131\002\000\002\040\012\000\002\132" +
    "\002\000\002\040\012\000\002\133\002\000\002\040\012" +
    "\000\002\134\002\000\002\040\012\000\002\135\002\000" +
    "\002\040\012\000\002\040\011\000\002\040\011\000\002" +
    "\054\005\000\002\136\002\000\002\054\012\000\002\137" +
    "\002\000\002\054\012\000\002\140\002\000\002\054\012" +
    "\000\002\141\002\000\002\054\012\000\002\142\002\000" +
    "\002\054\012\000\002\143\002\000\002\054\012\000\002" +
    "\144\002\000\002\054\012\000\002\145\002\000\002\054" +
    "\012\000\002\054\011\000\002\054\011\000\002\146\002" +
    "\000\002\043\007\000\002\147\002\000\002\043\007\000" +
    "\002\150\002\000\002\043\007\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\006\024\000\044\000\001\002\000\004\002" +
    "\u0234\001\002\000\006\024\010\044\006\001\002\000\004" +
    "\003\u0231\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\u022c\044\u022b\001\002\000\020\007\024\012\027\014\030" +
    "\030\020\036\022\037\021\044\023\001\002\000\020\003" +
    "\uffd3\007\024\012\uffd3\030\uffd3\036\uffd3\037\uffd3\044\023" +
    "\001\002\000\012\012\uffdc\030\uffdc\036\022\037\021\001" +
    "\002\000\004\002\ufffe\001\002\000\004\012\027\001\002" +
    "\000\004\003\u0225\001\002\000\006\012\uffd9\030\uffd9\001" +
    "\002\000\004\044\u019e\001\002\000\006\003\u0187\044\u0186" +
    "\001\002\000\006\007\u0117\044\u0115\001\002\000\006\003" +
    "\u0104\007\u0105\001\002\000\004\003\u0100\001\002\000\006" +
    "\012\027\030\020\001\002\000\004\002\ufff9\001\002\000" +
    "\034\017\050\020\064\021\070\022\054\035\053\041\034" +
    "\042\065\043\044\044\056\045\046\047\061\051\071\055" +
    "\040\001\002\000\006\007\024\044\023\001\002\000\010" +
    "\012\uffdb\030\uffdb\037\021\001\002\000\006\012\uffd7\030" +
    "\uffd7\001\002\000\012\012\uffd5\030\uffd5\036\uffd5\037\uffd5" +
    "\001\002\000\006\003\362\047\363\001\002\000\064\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\001\002\000" +
    "\006\003\uff98\054\uff98\001\002\000\006\003\uff95\054\uff95" +
    "\001\002\000\004\003\361\001\002\000\004\017\356\001" +
    "\002\000\020\004\uffa9\005\uffa9\006\uffa9\007\140\010\uffa9" +
    "\027\uffa9\055\141\001\002\000\010\003\uff99\034\354\054" +
    "\uff99\001\002\000\006\003\uff89\054\uff89\001\002\000\016" +
    "\004\105\005\106\006\107\007\104\010\103\027\110\001" +
    "\002\000\066\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\020\uffcf\021\uffcf\022\uffcf\027\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\001\002\000\064\003\uffb8\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\020\uffb8\021\uffb8\022\uffb8\027" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\054\uffb8\055\uffb8\001\002\000\004\044\352\001\002" +
    "\000\020\003\346\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\027\uffb7\001\002\000\066\003\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\020\uffce\021\uffce\022\uffce\027" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\001\002\000\066\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002" +
    "\000\020\020\064\033\315\035\053\044\075\045\046\047" +
    "\072\051\071\001\002\000\006\003\uff8a\054\uff8a\001\002" +
    "\000\030\003\uffa0\004\uffcd\005\uffcd\006\uffcd\007\253\010" +
    "\uffcd\027\uffcd\047\311\051\112\054\uffa0\055\254\001\002" +
    "\000\064\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\027\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6" +
    "\001\002\000\066\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\020\uffaa\021\uffaa\022\uffaa\027\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\001\002\000\020\020\064\035\053\044" +
    "\075\045\046\046\305\047\072\051\071\001\002\000\006" +
    "\003\uff97\054\uff97\001\002\000\006\003\302\054\303\001" +
    "\002\000\066\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\020\uffd0\021\uffd0\022\uffd0\027\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\001\002\000\004\047\267\001\002\000\006" +
    "\003\uff8b\054\uff8b\001\002\000\006\003\uff96\054\uff96\001" +
    "\002\000\010\003\136\044\134\055\040\001\002\000\016" +
    "\020\064\035\053\044\075\045\046\047\072\051\071\001" +
    "\002\000\016\020\064\035\053\044\075\045\046\047\072" +
    "\051\071\001\002\000\066\003\uffa9\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\020\uffa9\021\uffa9\022\uffa9\027\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\001\002\000\020\004\105\005" +
    "\106\006\107\007\104\010\103\027\110\052\122\001\002" +
    "\000\064\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\027\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\051\112\052\uffcd\054\uffcd\055\uffcd" +
    "\001\002\000\064\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\020\uffb7\021\uffb7\022\uffb7\027\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7" +
    "\055\uffb7\001\002\000\034\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\020\064\027\uffb5\035\053\044\075\045\046" +
    "\047\072\051\071\052\uffb5\001\002\000\020\004\105\005" +
    "\106\006\107\007\104\010\103\027\110\052\102\001\002" +
    "\000\016\020\064\035\053\044\075\045\046\047\072\051" +
    "\071\001\002\000\064\003\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\020\uffb2\021\uffb2\022\uffb2\027\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\001\002\000\020\020\uffaf\035\uffaf\044\uffaf" +
    "\045\uffaf\047\uffaf\051\uffaf\052\uffaf\001\002\000\020\020" +
    "\uffab\035\uffab\044\uffab\045\uffab\047\uffab\051\uffab\052\uffab" +
    "\001\002\000\020\020\uffae\035\uffae\044\uffae\045\uffae\047" +
    "\uffae\051\uffae\052\uffae\001\002\000\020\020\uffb0\035\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\051\uffb0\052\uffb0\001\002\000" +
    "\020\020\uffac\035\uffac\044\uffac\045\uffac\047\uffac\051\uffac" +
    "\052\uffac\001\002\000\020\020\uffad\035\uffad\044\uffad\045" +
    "\uffad\047\uffad\051\uffad\052\uffad\001\002\000\064\003\uffbb" +
    "\004\105\005\106\006\107\007\104\010\103\020\uffbb\021" +
    "\uffbb\022\uffbb\027\110\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\001\002\000\006" +
    "\044\114\045\113\001\002\000\004\052\120\001\002\000" +
    "\006\051\112\052\117\001\002\000\004\052\116\001\002" +
    "\000\066\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\001\002\000\066\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\020\uffa7\021\uffa7\022\uffa7\027\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\001\002\000\066\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\027\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\001\002\000" +
    "\020\020\064\035\053\044\075\045\046\047\072\051\071" +
    "\052\123\001\002\000\064\003\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\020\uffb1\021\uffb1\022\uffb1\027\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\054\uffb1\055\uffb1\001\002\000\064\003\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\027\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\054\uffb9\055\uffb9\001\002\000\020\004\105\005" +
    "\106\006\107\007\104\010\103\027\110\050\131\001\002" +
    "\000\034\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\020" +
    "\064\027\uffb6\035\053\044\075\045\046\047\072\050\uffb6" +
    "\051\071\001\002\000\020\004\105\005\106\006\107\007" +
    "\104\010\103\027\110\050\127\001\002\000\064\003\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\027\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\001\002\000\016" +
    "\020\064\035\053\044\075\045\046\047\072\051\071\001" +
    "\002\000\064\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\020\uffb3\021\uffb3\022\uffb3\027\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055" +
    "\uffb3\001\002\000\020\004\105\005\106\006\107\007\104" +
    "\010\103\027\110\050\133\001\002\000\064\003\uffba\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\020\uffba\021\uffba" +
    "\022\uffba\027\uffba\032\uffba\033\uffba\034\uffba\035\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\054\uffba\055\uffba\001\002\000\010\007" +
    "\253\051\112\055\254\001\002\000\006\003\203\034\202" +
    "\001\002\000\004\034\uff2a\001\002\000\006\007\140\055" +
    "\141\001\002\000\004\003\171\001\002\000\006\003\142" +
    "\007\143\001\002\000\016\020\uff4b\035\uff4b\044\uff4b\045" +
    "\uff4b\047\uff4b\051\uff4b\001\002\000\020\020\064\035\053" +
    "\044\146\045\046\047\072\051\071\054\uff47\001\002\000" +
    "\004\054\165\001\002\000\010\003\uff91\034\uff91\054\uff91" +
    "\001\002\000\034\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\027\uffcd\034\uffcd\047\152\050\uffcd\051\112" +
    "\053\uffcd\054\uffcd\001\002\000\024\003\uff90\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\027\uffaa\034\uff90\054\uff90" +
    "\001\002\000\024\003\uff92\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\027\uffb7\034\uff92\054\uff92\001\002\000\010" +
    "\003\uff93\034\uff93\054\uff93\001\002\000\012\020\064\035" +
    "\053\044\146\045\046\001\002\000\006\050\uffa5\053\163" +
    "\001\002\000\006\050\uffa3\053\157\001\002\000\004\050" +
    "\156\001\002\000\014\003\uffa2\034\uffa2\050\uffa2\053\uffa2" +
    "\054\uffa2\001\002\000\012\020\064\035\053\044\146\045" +
    "\046\001\002\000\004\050\uffa3\001\002\000\004\050\162" +
    "\001\002\000\014\003\uffa1\034\uffa1\050\uffa1\053\uffa1\054" +
    "\uffa1\001\002\000\012\020\064\035\053\044\146\045\046" +
    "\001\002\000\004\050\uffa4\001\002\000\010\003\uff46\034" +
    "\uff46\054\uff46\001\002\000\016\020\064\035\053\044\146" +
    "\045\046\047\072\051\071\001\002\000\004\054\170\001" +
    "\002\000\010\003\uff4a\034\uff4a\054\uff4a\001\002\000\016" +
    "\020\uff4f\035\uff4f\044\uff4f\045\uff4f\047\uff4f\051\uff4f\001" +
    "\002\000\016\020\064\035\053\044\146\045\046\047\072" +
    "\051\071\001\002\000\010\003\uff4e\034\uff4e\054\uff4e\001" +
    "\002\000\004\034\175\001\002\000\004\044\176\001\002" +
    "\000\004\015\177\001\002\000\032\020\064\021\070\022" +
    "\054\035\053\041\034\042\065\043\044\044\056\045\046" +
    "\047\061\051\071\055\040\001\002\000\004\017\201\001" +
    "\002\000\006\003\uff29\054\uff29\001\002\000\010\003\220" +
    "\044\216\045\217\001\002\000\006\044\uff28\045\uff26\001" +
    "\002\000\004\045\212\001\002\000\004\044\206\001\002" +
    "\000\004\015\207\001\002\000\032\020\064\021\070\022" +
    "\054\035\053\041\034\042\065\043\044\044\056\045\046" +
    "\047\061\051\071\055\040\001\002\000\004\017\211\001" +
    "\002\000\006\003\uff27\054\uff27\001\002\000\004\015\213" +
    "\001\002\000\032\020\064\021\070\022\054\035\053\041" +
    "\034\042\065\043\044\044\056\045\046\047\061\051\071" +
    "\055\040\001\002\000\004\017\215\001\002\000\006\003" +
    "\uff25\054\uff25\001\002\000\006\003\241\015\240\001\002" +
    "\000\006\003\226\015\225\001\002\000\004\015\uff24\001" +
    "\002\000\004\015\222\001\002\000\032\020\064\021\070" +
    "\022\054\035\053\041\034\042\065\043\044\044\056\045" +
    "\046\047\061\051\071\055\040\001\002\000\004\017\224" +
    "\001\002\000\006\003\uff23\054\uff23\001\002\000\034\003" +
    "\233\020\064\021\070\022\054\035\053\041\034\042\065" +
    "\043\044\044\056\045\046\047\061\051\071\055\040\001" +
    "\002\000\032\020\uff20\021\uff20\022\uff20\035\uff20\041\uff20" +
    "\042\uff20\043\uff20\044\uff20\045\uff20\047\uff20\051\uff20\055" +
    "\uff20\001\002\000\032\020\064\021\070\022\054\035\053" +
    "\041\034\042\065\043\044\044\056\045\046\047\061\051" +
    "\071\055\040\001\002\000\004\017\231\001\002\000\006" +
    "\003\uff1f\054\uff1f\001\002\000\006\003\236\017\237\001" +
    "\002\000\004\017\uff1c\001\002\000\004\017\235\001\002" +
    "\000\006\003\uff1b\054\uff1b\001\002\000\006\003\uff19\054" +
    "\uff19\001\002\000\006\003\uff8c\054\uff8c\001\002\000\034" +
    "\003\246\020\064\021\070\022\054\035\053\041\034\042" +
    "\065\043\044\044\056\045\046\047\061\051\071\055\040" +
    "\001\002\000\032\020\uff22\021\uff22\022\uff22\035\uff22\041" +
    "\uff22\042\uff22\043\uff22\044\uff22\045\uff22\047\uff22\051\uff22" +
    "\055\uff22\001\002\000\032\020\064\021\070\022\054\035" +
    "\053\041\034\042\065\043\044\044\056\045\046\047\061" +
    "\051\071\055\040\001\002\000\004\017\244\001\002\000" +
    "\006\003\uff21\054\uff21\001\002\000\006\003\251\017\252" +
    "\001\002\000\004\017\uff1e\001\002\000\004\017\250\001" +
    "\002\000\006\003\uff1d\054\uff1d\001\002\000\006\003\uff1a" +
    "\054\uff1a\001\002\000\006\003\uff8d\054\uff8d\001\002\000" +
    "\004\003\264\001\002\000\020\007\255\020\uff4d\035\uff4d" +
    "\044\uff4d\045\uff4d\047\uff4d\051\uff4d\001\002\000\020\020" +
    "\064\035\053\044\146\045\046\047\072\051\071\054\uff49" +
    "\001\002\000\016\020\064\035\053\044\146\045\046\047" +
    "\072\051\071\001\002\000\004\054\260\001\002\000\010" +
    "\003\uff4c\034\uff4c\054\uff4c\001\002\000\004\054\263\001" +
    "\002\000\010\003\uff94\034\uff94\054\uff94\001\002\000\010" +
    "\003\uff48\034\uff48\054\uff48\001\002\000\016\020\uff51\035" +
    "\uff51\044\uff51\045\uff51\047\uff51\051\uff51\001\002\000\016" +
    "\020\064\035\053\044\146\045\046\047\072\051\071\001" +
    "\002\000\010\003\uff50\034\uff50\054\uff50\001\002\000\016" +
    "\020\064\035\053\044\273\045\271\047\072\051\071\001" +
    "\002\000\020\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\027\uffa9\050\301\001\002\000\020\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\027\uffcf\050\300\001\002\000\004" +
    "\050\277\001\002\000\024\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\027\uffcd\047\152\050\276\051\112\001\002" +
    "\000\020\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\027" +
    "\uffb7\050\275\001\002\000\006\003\uff85\054\uff85\001\002" +
    "\000\006\003\uff87\054\uff87\001\002\000\006\003\uff84\054" +
    "\uff84\001\002\000\006\003\uff86\054\uff86\001\002\000\006" +
    "\003\uff83\054\uff83\001\002\000\012\003\uff53\016\uff53\017" +
    "\uff53\054\uff53\001\002\000\042\003\uff9b\016\uff9b\017\uff9b" +
    "\020\064\021\070\022\054\035\053\041\034\042\065\043" +
    "\044\044\056\045\046\047\061\051\071\054\uff9b\055\040" +
    "\001\002\000\012\003\uff9a\016\uff9a\017\uff9a\054\uff9a\001" +
    "\002\000\004\003\306\001\002\000\004\050\uff05\001\002" +
    "\000\004\050\310\001\002\000\006\003\uff04\054\uff04\001" +
    "\002\000\014\020\064\035\053\044\146\045\046\050\312" +
    "\001\002\000\006\003\uff9f\054\uff9f\001\002\000\004\050" +
    "\314\001\002\000\006\003\uff9e\054\uff9e\001\002\000\004" +
    "\003\345\001\002\000\050\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\020\064\021\070\022\054\027\uffb7\033\320" +
    "\035\053\041\034\042\065\043\044\044\056\045\046\047" +
    "\061\051\071\055\040\001\002\000\004\003\342\001\002" +
    "\000\034\003\322\020\064\021\070\022\054\035\053\041" +
    "\034\042\065\043\044\044\056\045\046\047\061\051\071" +
    "\055\040\001\002\000\010\016\327\017\331\054\330\001" +
    "\002\000\006\016\uff3c\017\uff3e\001\002\000\004\016\326" +
    "\001\002\000\004\017\325\001\002\000\006\003\uff3d\054" +
    "\uff3d\001\002\000\006\003\uff3b\054\uff3b\001\002\000\034" +
    "\003\334\020\064\021\070\022\054\035\053\041\034\042" +
    "\065\043\044\044\056\045\046\047\061\051\071\055\040" +
    "\001\002\000\004\003\332\001\002\000\006\003\uff8e\054" +
    "\uff8e\001\002\000\006\003\uff41\054\uff41\001\002\000\006" +
    "\017\340\054\337\001\002\000\004\017\uff3a\001\002\000" +
    "\004\017\336\001\002\000\006\003\uff39\054\uff39\001\002" +
    "\000\004\003\341\001\002\000\006\003\uff8f\054\uff8f\001" +
    "\002\000\006\003\uff40\054\uff40\001\002\000\004\017\uff43" +
    "\001\002\000\004\017\344\001\002\000\006\003\uff42\054" +
    "\uff42\001\002\000\006\003\uff3f\054\uff3f\001\002\000\032" +
    "\020\uff45\021\uff45\022\uff45\035\uff45\041\uff45\042\uff45\043" +
    "\uff45\044\uff45\045\uff45\047\uff45\051\uff45\055\uff45\001\002" +
    "\000\032\020\064\021\070\022\054\035\053\041\034\042" +
    "\065\043\044\044\056\045\046\047\061\051\071\055\040" +
    "\001\002\000\004\017\351\001\002\000\006\003\uff44\054" +
    "\uff44\001\002\000\004\054\353\001\002\000\004\002\uff9c" +
    "\001\002\000\004\003\355\001\002\000\006\003\uff2b\054" +
    "\uff2b\001\002\000\004\044\357\001\002\000\004\054\360" +
    "\001\002\000\004\002\uff9d\001\002\000\010\003\uff52\034" +
    "\uff52\054\uff52\001\002\000\004\046\uff03\001\002\000\006" +
    "\003\365\046\364\001\002\000\006\003\370\050\371\001" +
    "\002\000\004\050\uff01\001\002\000\004\050\367\001\002" +
    "\000\006\003\uff00\054\uff00\001\002\000\006\003\ufeff\054" +
    "\ufeff\001\002\000\006\003\uff88\054\uff88\001\002\000\004" +
    "\046\373\001\002\000\004\050\374\001\002\000\006\003" +
    "\uff02\054\uff02\001\002\000\004\002\ufffb\001\002\000\004" +
    "\012\027\001\002\000\004\002\ufffc\001\002\000\010\020" +
    "\uff7c\035\uff7c\045\uff7c\001\002\000\010\020\064\035\053" +
    "\045\046\001\002\000\004\054\u0103\001\002\000\020\003" +
    "\uff7b\007\uff7b\012\uff7b\030\uff7b\036\uff7b\037\uff7b\044\uff7b" +
    "\001\002\000\010\020\uff7a\035\uff7a\045\uff7a\001\002\000" +
    "\014\003\u0106\011\u0108\020\064\035\053\045\046\001\002" +
    "\000\012\020\uff76\035\uff76\045\uff76\054\uff78\001\002\000" +
    "\004\054\u010c\001\002\000\004\003\u0109\001\002\000\006" +
    "\007\uff74\044\uff74\001\002\000\006\007\024\044\023\001" +
    "\002\000\020\003\uff73\007\uff73\012\uff73\030\uff73\036\uff73" +
    "\037\uff73\044\uff73\001\002\000\020\003\uffd2\007\uffd2\012" +
    "\uffd2\030\uffd2\036\uffd2\037\uffd2\044\uffd2\001\002\000\010" +
    "\020\064\035\053\045\046\001\002\000\004\054\u010f\001" +
    "\002\000\020\003\uff77\007\uff77\012\uff77\030\uff77\036\uff77" +
    "\037\uff77\044\uff77\001\002\000\006\007\024\044\023\001" +
    "\002\000\020\003\uff75\007\uff75\012\uff75\030\uff75\036\uff75" +
    "\037\uff75\044\uff75\001\002\000\010\020\064\035\053\045" +
    "\046\001\002\000\004\054\u0114\001\002\000\020\003\uff79" +
    "\007\uff79\012\uff79\030\uff79\036\uff79\037\uff79\044\uff79\001" +
    "\002\000\012\003\u0128\007\u0129\053\u0127\055\u012a\001\002" +
    "\000\010\012\uffcc\030\uffcc\037\uffcc\001\002\000\004\003" +
    "\u011a\001\002\000\014\007\u0117\012\uffcb\030\uffcb\037\uffcb" +
    "\044\u0115\001\002\000\010\012\uffca\030\uffca\037\uffca\001" +
    "\002\000\004\011\uff72\001\002\000\004\011\u011c\001\002" +
    "\000\004\051\u011d\001\002\000\004\045\u011e\001\002\000" +
    "\004\056\u011f\001\002\000\004\045\u0120\001\002\000\004" +
    "\052\u0121\001\002\000\004\026\u0122\001\002\000\006\013" +
    "\u0125\023\u0123\001\002\000\020\003\uffc5\012\uffc5\030\uffc5" +
    "\044\uffc5\050\uffc5\054\uffc5\055\uffc5\001\002\000\004\054" +
    "\u0126\001\002\000\020\003\uffc4\012\uffc4\030\uffc4\044\uffc4" +
    "\050\uffc4\054\uffc4\055\uffc4\001\002\000\014\007\uff71\012" +
    "\uff71\030\uff71\037\uff71\044\uff71\001\002\000\004\003\u0184" +
    "\001\002\000\004\011\uff70\001\002\000\006\003\u012c\011" +
    "\u012d\001\002\000\004\003\u012b\001\002\000\014\007\uff5d" +
    "\012\uff5d\030\uff5d\037\uff5d\044\uff5d\001\002\000\004\051" +
    "\uff6e\001\002\000\006\003\u012e\051\u012f\001\002\000\004" +
    "\045\uff6c\001\002\000\010\003\u0132\044\u0130\045\u0131\001" +
    "\002\000\004\056\u015e\001\002\000\006\003\u013b\056\u013a" +
    "\001\002\000\004\056\uff6a\001\002\000\004\056\u0134\001" +
    "\002\000\004\045\u0135\001\002\000\004\052\u0136\001\002" +
    "\000\004\026\u0137\001\002\000\006\013\u0125\023\u0123\001" +
    "\002\000\004\054\u0139\001\002\000\014\007\uff69\012\uff69" +
    "\030\uff69\037\uff69\044\uff69\001\002\000\010\003\u0143\044" +
    "\u0141\045\u0142\001\002\000\004\052\uff68\001\002\000\004" +
    "\052\u013d\001\002\000\004\026\u013e\001\002\000\006\013" +
    "\u0125\023\u0123\001\002\000\004\054\u0140\001\002\000\014" +
    "\007\uff67\012\uff67\030\uff67\037\uff67\044\uff67\001\002\000" +
    "\004\052\u015a\001\002\000\006\003\u014a\052\u0149\001\002" +
    "\000\004\052\uff66\001\002\000\004\052\u0145\001\002\000" +
    "\004\026\u0146\001\002\000\006\013\u0125\023\u0123\001\002" +
    "\000\004\054\u0148\001\002\000\014\007\uff65\012\uff65\030" +
    "\uff65\037\uff65\044\uff65\001\002\000\006\003\u014f\026\u0150" +
    "\001\002\000\004\026\uff64\001\002\000\004\026\u014c\001" +
    "\002\000\006\013\u0125\023\u0123\001\002\000\004\054\u014e" +
    "\001\002\000\014\007\uff63\012\uff63\030\uff63\037\uff63\044" +
    "\uff63\001\002\000\006\013\uff62\023\uff62\001\002\000\010" +
    "\003\u0151\013\u0125\023\u0123\001\002\000\004\054\uff60\001" +
    "\002\000\006\003\u0153\054\u0154\001\002\000\014\007\uff5e" +
    "\012\uff5e\030\uff5e\037\uff5e\044\uff5e\001\002\000\014\007" +
    "\uffc9\012\uffc9\030\uffc9\037\uffc9\044\uffc9\001\002\000\004" +
    "\054\u0156\001\002\000\014\007\uff5f\012\uff5f\030\uff5f\037" +
    "\uff5f\044\uff5f\001\002\000\006\013\u0125\023\u0123\001\002" +
    "\000\004\054\u0159\001\002\000\014\007\uff61\012\uff61\030" +
    "\uff61\037\uff61\044\uff61\001\002\000\004\026\u015b\001\002" +
    "\000\006\013\u0125\023\u0123\001\002\000\004\054\u015d\001" +
    "\002\000\014\007\uffc6\012\uffc6\030\uffc6\037\uffc6\044\uffc6" +
    "\001\002\000\006\044\u0160\045\u015f\001\002\000\004\052" +
    "\u0165\001\002\000\004\052\u0161\001\002\000\004\026\u0162" +
    "\001\002\000\006\013\u0125\023\u0123\001\002\000\004\054" +
    "\u0164\001\002\000\014\007\uffc7\012\uffc7\030\uffc7\037\uffc7" +
    "\044\uffc7\001\002\000\004\026\u0166\001\002\000\006\013" +
    "\u0125\023\u0123\001\002\000\004\054\u0168\001\002\000\014" +
    "\007\uffc8\012\uffc8\030\uffc8\037\uffc8\044\uffc8\001\002\000" +
    "\004\045\u016a\001\002\000\004\056\u016b\001\002\000\004" +
    "\045\u016c\001\002\000\004\052\u016d\001\002\000\004\026" +
    "\u016e\001\002\000\006\013\u0125\023\u0123\001\002\000\004" +
    "\054\u0170\001\002\000\014\007\uff6b\012\uff6b\030\uff6b\037" +
    "\uff6b\044\uff6b\001\002\000\004\051\u0172\001\002\000\004" +
    "\045\u0173\001\002\000\004\056\u0174\001\002\000\004\045" +
    "\u0175\001\002\000\004\052\u0176\001\002\000\004\026\u0177" +
    "\001\002\000\006\013\u0125\023\u0123\001\002\000\004\054" +
    "\u0179\001\002\000\014\007\uff6d\012\uff6d\030\uff6d\037\uff6d" +
    "\044\uff6d\001\002\000\004\011\u017b\001\002\000\004\051" +
    "\u017c\001\002\000\004\045\u017d\001\002\000\004\056\u017e" +
    "\001\002\000\004\045\u017f\001\002\000\004\052\u0180\001" +
    "\002\000\004\026\u0181\001\002\000\006\013\u0125\023\u0123" +
    "\001\002\000\004\054\u0183\001\002\000\014\007\uff6f\012" +
    "\uff6f\030\uff6f\037\uff6f\044\uff6f\001\002\000\014\007\uff5c" +
    "\012\uff5c\030\uff5c\037\uff5c\044\uff5c\001\002\000\016\003" +
    "\u0187\012\uffc2\030\uffc2\044\u0186\054\uffc2\055\uffc2\001\002" +
    "\000\010\003\u018e\053\u018d\055\u018f\001\002\000\010\013" +
    "\uff5b\023\uff5b\044\uff5b\001\002\000\006\012\uffc3\030\uffc3" +
    "\001\002\000\010\013\u0125\023\u0123\044\u018a\001\002\000" +
    "\020\003\uffbd\012\uffbd\030\uffbd\044\uffbd\050\uffbd\054\uffbd" +
    "\055\uffbd\001\002\000\020\003\uffbc\012\uffbc\030\uffbc\044" +
    "\uffbc\050\uffbc\054\uffbc\055\uffbc\001\002\000\016\003\uff5a" +
    "\012\uff5a\030\uff5a\044\uff5a\054\uff5a\055\uff5a\001\002\000" +
    "\006\003\u0198\044\u0186\001\002\000\010\013\uff59\023\uff59" +
    "\044\uff59\001\002\000\012\003\u0190\013\u0125\023\u0123\044" +
    "\u018a\001\002\000\016\003\uff57\012\uff57\030\uff57\044\uff57" +
    "\054\uff57\055\uff57\001\002\000\010\003\u0192\050\u0193\054" +
    "\u0194\001\002\000\016\003\uff54\012\uff54\030\uff54\044\uff54" +
    "\054\uff54\055\uff54\001\002\000\016\003\uffc0\012\uffc0\030" +
    "\uffc0\044\uffc0\054\uffc0\055\uffc0\001\002\000\016\003\uffbf" +
    "\012\uffbf\030\uffbf\044\uffbf\054\uffbf\055\uffbf\001\002\000" +
    "\010\013\u0125\023\u0123\044\u018a\001\002\000\016\003\uff58" +
    "\012\uff58\030\uff58\044\uff58\054\uff58\055\uff58\001\002\000" +
    "\016\003\uffbe\012\uffbe\030\uffbe\044\uffbe\054\uffbe\055\uffbe" +
    "\001\002\000\012\013\uff5b\023\uff5b\044\uff5b\055\uff56\001" +
    "\002\000\004\055\u019a\001\002\000\006\013\u0125\023\u0123" +
    "\001\002\000\004\054\u019c\001\002\000\016\003\uff55\012" +
    "\uff55\030\uff55\044\uff55\054\uff55\055\uff55\001\002\000\012" +
    "\012\uffc1\030\uffc1\054\uffc1\055\uffc1\001\002\000\010\047" +
    "\u01a4\054\u01a5\055\u01a3\001\002\000\006\012\ufff3\030\020" +
    "\001\002\000\006\012\ufff4\030\020\001\002\000\004\012" +
    "\ufff2\001\002\000\004\012\ufff1\001\002\000\006\013\u0125" +
    "\023\u0123\001\002\000\010\003\u0187\044\u0186\050\u0214\001" +
    "\002\000\020\007\024\012\u01aa\014\030\030\020\036\022" +
    "\037\021\044\023\001\002\000\004\012\u01aa\001\002\000" +
    "\006\012\ufff0\030\ufff0\001\002\000\006\012\ufff5\030\ufff5" +
    "\001\002\000\006\012\u01aa\030\020\001\002\000\036\017" +
    "\u01ad\020\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034" +
    "\042\065\043\044\044\056\045\046\047\061\051\071\055" +
    "\040\001\002\000\004\054\uffe2\001\002\000\006\034\u020e" +
    "\054\uffe6\001\002\000\004\044\u020c\001\002\000\012\020" +
    "\064\035\053\044\u020a\045\046\001\002\000\020\003\u0206" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\027\uffb7\001" +
    "\002\000\020\020\064\033\u01ed\035\053\044\075\045\046" +
    "\047\072\051\071\001\002\000\004\017\u01ea\001\002\000" +
    "\004\054\uffe5\001\002\000\004\054\uffe4\001\002\000\004" +
    "\054\uffe3\001\002\000\010\003\u01ba\044\134\055\040\001" +
    "\002\000\004\054\u01b7\001\002\000\044\003\uffe8\016\uffe8" +
    "\017\uffe8\020\064\021\u01b5\022\u01b0\032\u01ae\035\053\041" +
    "\034\042\065\043\044\044\056\045\046\047\061\051\071" +
    "\054\uffe8\055\040\001\002\000\012\003\uffe7\016\uffe7\017" +
    "\uffe7\054\uffe7\001\002\000\006\003\u01c2\034\u01c1\001\002" +
    "\000\004\034\uff17\001\002\000\004\034\u01bc\001\002\000" +
    "\004\044\u01bd\001\002\000\004\015\u01be\001\002\000\034" +
    "\020\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042" +
    "\065\043\044\044\056\045\046\047\061\051\071\055\040" +
    "\001\002\000\004\017\u01c0\001\002\000\004\054\uff16\001" +
    "\002\000\010\003\u01cf\044\u01cd\045\u01ce\001\002\000\006" +
    "\044\uff15\045\uff13\001\002\000\004\044\u01c9\001\002\000" +
    "\004\045\u01c5\001\002\000\004\015\u01c6\001\002\000\034" +
    "\020\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042" +
    "\065\043\044\044\056\045\046\047\061\051\071\055\040" +
    "\001\002\000\004\017\u01c8\001\002\000\004\054\uff12\001" +
    "\002\000\004\015\u01ca\001\002\000\032\020\064\021\070" +
    "\022\054\035\053\041\034\042\065\043\044\044\056\045" +
    "\046\047\061\051\071\055\040\001\002\000\004\017\u01cc" +
    "\001\002\000\004\054\uff14\001\002\000\006\003\u01e0\015" +
    "\u01df\001\002\000\006\003\u01d5\015\u01d4\001\002\000\004" +
    "\015\uff11\001\002\000\004\015\u01d1\001\002\000\034\020" +
    "\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042\065" +
    "\043\044\044\056\045\046\047\061\051\071\055\040\001" +
    "\002\000\004\017\u01d3\001\002\000\004\054\uff10\001\002" +
    "\000\036\003\u01da\020\064\021\u01b5\022\u01b0\032\u01ae\035" +
    "\053\041\034\042\065\043\044\044\056\045\046\047\061" +
    "\051\071\055\040\001\002\000\034\020\uff0d\021\uff0d\022" +
    "\uff0d\032\uff0d\035\uff0d\041\uff0d\042\uff0d\043\uff0d\044\uff0d" +
    "\045\uff0d\047\uff0d\051\uff0d\055\uff0d\001\002\000\034\020" +
    "\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042\065" +
    "\043\044\044\056\045\046\047\061\051\071\055\040\001" +
    "\002\000\004\017\u01d8\001\002\000\004\054\uff0c\001\002" +
    "\000\006\003\u01dd\017\u01de\001\002\000\004\017\uff09\001" +
    "\002\000\004\017\u01dc\001\002\000\004\054\uff08\001\002" +
    "\000\004\054\uff06\001\002\000\004\054\uffdd\001\002\000" +
    "\036\003\u01e5\020\064\021\u01b5\022\u01b0\032\u01ae\035\053" +
    "\041\034\042\065\043\044\044\056\045\046\047\061\051" +
    "\071\055\040\001\002\000\034\020\uff0f\021\uff0f\022\uff0f" +
    "\032\uff0f\035\uff0f\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045" +
    "\uff0f\047\uff0f\051\uff0f\055\uff0f\001\002\000\034\020\064" +
    "\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042\065\043" +
    "\044\044\056\045\046\047\061\051\071\055\040\001\002" +
    "\000\004\017\u01e3\001\002\000\004\054\uff0e\001\002\000" +
    "\006\003\u01e8\017\u01e9\001\002\000\004\017\uff0b\001\002" +
    "\000\004\017\u01e7\001\002\000\004\054\uff0a\001\002\000" +
    "\004\054\uff07\001\002\000\004\054\uffde\001\002\000\004" +
    "\044\u01eb\001\002\000\004\054\u01ec\001\002\000\006\012" +
    "\uffea\030\uffea\001\002\000\004\003\u0205\001\002\000\052" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\020\064\021" +
    "\u01b5\022\u01b0\027\uffb7\032\u01ae\033\u01ef\035\053\041\034" +
    "\042\065\043\044\044\056\045\046\047\061\051\071\055" +
    "\040\001\002\000\036\003\u01f5\020\064\021\u01b5\022\u01b0" +
    "\032\u01ae\035\053\041\034\042\065\043\044\044\056\045" +
    "\046\047\061\051\071\055\040\001\002\000\004\003\u01f1" +
    "\001\002\000\004\017\uff36\001\002\000\004\017\u01f3\001" +
    "\002\000\004\054\uff35\001\002\000\010\016\u01fa\017\u01fc" +
    "\054\u01fb\001\002\000\006\016\uff2f\017\uff31\001\002\000" +
    "\004\017\u01f9\001\002\000\004\016\u01f8\001\002\000\004" +
    "\054\uff2e\001\002\000\004\054\uff30\001\002\000\036\003" +
    "\u01ff\020\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034" +
    "\042\065\043\044\044\056\045\046\047\061\051\071\055" +
    "\040\001\002\000\004\003\u01fd\001\002\000\004\054\uffdf" +
    "\001\002\000\004\054\uff34\001\002\000\006\017\u0203\054" +
    "\u0202\001\002\000\004\017\uff2d\001\002\000\004\017\u0201" +
    "\001\002\000\004\054\uff2c\001\002\000\004\003\u0204\001" +
    "\002\000\004\054\uffe0\001\002\000\004\054\uff33\001\002" +
    "\000\004\054\uff32\001\002\000\034\020\uff38\021\uff38\022" +
    "\uff38\032\uff38\035\uff38\041\uff38\042\uff38\043\uff38\044\uff38" +
    "\045\uff38\047\uff38\051\uff38\055\uff38\001\002\000\034\020" +
    "\064\021\u01b5\022\u01b0\032\u01ae\035\053\041\034\042\065" +
    "\043\044\044\056\045\046\047\061\051\071\055\040\001" +
    "\002\000\004\017\u0209\001\002\000\004\054\uff37\001\002" +
    "\000\004\054\uffcd\001\002\000\004\054\uffe1\001\002\000" +
    "\004\054\u020d\001\002\000\006\012\uffe9\030\uffe9\001\002" +
    "\000\004\003\u020f\001\002\000\004\054\uff18\001\002\000" +
    "\004\012\u01aa\001\002\000\006\012\ufff7\030\ufff7\001\002" +
    "\000\006\012\ufff8\030\ufff8\001\002\000\006\012\ufff6\030" +
    "\ufff6\001\002\000\006\054\u021d\055\u021c\001\002\000\006" +
    "\054\u0217\055\u0216\001\002\000\006\013\u0125\023\u0123\001" +
    "\002\000\020\007\024\012\u01aa\014\030\030\020\036\022" +
    "\037\021\044\023\001\002\000\006\012\uffee\030\uffee\001" +
    "\002\000\004\054\u021a\001\002\000\020\007\024\012\u01aa" +
    "\014\030\030\020\036\022\037\021\044\023\001\002\000" +
    "\006\012\uffeb\030\uffeb\001\002\000\006\013\u0125\023\u0123" +
    "\001\002\000\020\007\024\012\u01aa\014\030\030\020\036" +
    "\022\037\021\044\023\001\002\000\006\012\uffef\030\uffef" +
    "\001\002\000\004\054\u0220\001\002\000\020\007\024\012" +
    "\u01aa\014\030\030\020\036\022\037\021\044\023\001\002" +
    "\000\006\012\uffec\030\uffec\001\002\000\004\054\u0223\001" +
    "\002\000\020\007\024\012\u01aa\014\030\030\020\036\022" +
    "\037\021\044\023\001\002\000\006\012\uffed\030\uffed\001" +
    "\002\000\012\012\uff7d\030\uff7d\036\uff7d\037\uff7d\001\002" +
    "\000\004\002\ufffa\001\002\000\010\012\uffda\030\uffda\037" +
    "\021\001\002\000\006\012\uffd8\030\uffd8\001\002\000\006" +
    "\012\uffd6\030\uffd6\001\002\000\014\003\uffd4\012\uffd4\030" +
    "\uffd4\036\uffd4\037\uffd4\001\002\000\006\003\u022f\054\u0230" +
    "\001\002\000\004\054\uff80\001\002\000\004\054\u022e\001" +
    "\002\000\020\007\uff7f\012\uff7f\014\uff7f\030\uff7f\036\uff7f" +
    "\037\uff7f\044\uff7f\001\002\000\020\007\uff7e\012\uff7e\014" +
    "\uff7e\030\uff7e\036\uff7e\037\uff7e\044\uff7e\001\002\000\020" +
    "\007\ufffd\012\ufffd\014\ufffd\030\ufffd\036\ufffd\037\ufffd\044" +
    "\ufffd\001\002\000\004\054\uff82\001\002\000\004\054\u0233" +
    "\001\002\000\020\007\uff81\012\uff81\014\uff81\030\uff81\036" +
    "\uff81\037\uff81\044\uff81\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\006\002\003\061\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\013\006" +
    "\012\007\030\010\016\011\014\012\024\013\015\014\011" +
    "\041\025\001\001\000\006\013\u0229\014\011\001\001\000" +
    "\006\007\u0226\010\u0227\001\001\000\002\001\001\000\004" +
    "\041\u0225\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\u019e\047\u019f\001\001\000\006\017\u0184\020\u0187" +
    "\001\001\000\006\015\u0115\016\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\375\041\374\001\001" +
    "\000\002\001\001\000\044\021\051\024\044\026\046\027" +
    "\050\030\056\031\034\032\041\035\040\036\042\037\035" +
    "\040\061\042\066\043\065\044\054\045\036\056\057\057" +
    "\062\001\001\000\006\013\032\014\011\001\001\000\004" +
    "\010\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\051\024\044\026\046\027\315\030\056\031" +
    "\034\032\072\056\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\051\024\123\026\046\027\075\030\124\031\034\032\072" +
    "\056\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\136\036\134\001\001\000\022\021" +
    "\051\024\073\026\046\027\075\030\056\031\076\032\072" +
    "\056\057\001\001\000\022\021\051\024\123\026\046\027" +
    "\075\030\124\031\034\032\072\056\057\001\001\000\002" +
    "\001\001\000\004\025\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\051\024\077\026\046\027\075" +
    "\030\056\031\034\032\072\056\057\001\001\000\004\025" +
    "\100\001\001\000\022\021\051\024\110\026\046\027\075" +
    "\030\056\031\034\032\072\056\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\100\001\001\000\004\032\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\051" +
    "\024\110\026\046\027\075\030\056\031\034\032\072\056" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\127\001\001\000\022\021\051\024\125\026\046\027" +
    "\075\030\056\031\034\032\072\056\057\001\001\000\004" +
    "\025\100\001\001\000\002\001\001\000\022\021\051\024" +
    "\131\026\046\027\075\030\056\031\034\032\072\056\057" +
    "\001\001\000\002\001\001\000\004\025\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\165\001\001\000\030\021\051" +
    "\024\044\026\046\027\147\030\056\031\034\032\072\033" +
    "\144\055\150\056\146\113\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\051\026\152" +
    "\032\072\033\153\034\154\056\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\051\026\152\032\072\033\157\034\160\056" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\051\026\152\032\072\033\157\034" +
    "\163\056\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\051\024\044\026\046\027\147\030\056\031" +
    "\034\032\072\033\144\055\166\056\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\171\001\001\000" +
    "\026\021\051\024\044\026\046\027\147\030\056\031\034" +
    "\032\072\033\144\055\172\056\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\021\051\024\044\026\046\027\050\030\056\031" +
    "\034\032\041\035\177\036\042\037\035\040\061\042\066" +
    "\043\065\044\054\045\036\056\057\057\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\127\204\130\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\021\051\024\044\026\046" +
    "\027\050\030\056\031\034\032\041\035\207\036\042\037" +
    "\035\040\061\042\066\043\065\044\054\045\036\056\057" +
    "\057\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\021\051\024\044\026\046\027\050" +
    "\030\056\031\034\032\041\035\213\036\042\037\035\040" +
    "\061\042\066\043\065\044\054\045\036\056\057\057\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\131\220\001\001\000\002" +
    "\001\001\000\044\021\051\024\044\026\046\027\050\030" +
    "\056\031\034\032\041\035\222\036\042\037\035\040\061" +
    "\042\066\043\065\044\054\045\036\056\057\057\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\021\051" +
    "\024\044\026\046\027\050\030\056\031\034\032\041\035" +
    "\231\036\042\037\035\040\061\042\066\043\065\044\054" +
    "\045\036\056\057\057\062\001\001\000\004\133\226\001" +
    "\001\000\044\021\051\024\044\026\046\027\050\030\056" +
    "\031\034\032\041\035\227\036\042\037\035\040\061\042" +
    "\066\043\065\044\054\045\036\056\057\057\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\021\051\024" +
    "\044\026\046\027\050\030\056\031\034\032\041\035\244" +
    "\036\042\037\035\040\061\042\066\043\065\044\054\045" +
    "\036\056\057\057\062\001\001\000\004\132\241\001\001" +
    "\000\044\021\051\024\044\026\046\027\050\030\056\031" +
    "\034\032\041\035\242\036\042\037\035\040\061\042\066" +
    "\043\065\044\054\045\036\056\057\057\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\255\001\001\000\030\021\051\024\044\026\046\027" +
    "\147\030\056\031\034\032\072\033\144\055\261\056\146" +
    "\112\260\001\001\000\026\021\051\024\044\026\046\027" +
    "\147\030\056\031\034\032\072\033\144\055\256\056\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\264" +
    "\001\001\000\026\021\051\024\044\026\046\027\147\030" +
    "\056\031\034\032\072\033\144\055\265\056\146\001\001" +
    "\000\002\001\001\000\024\021\051\024\044\026\046\027" +
    "\273\030\056\031\034\032\267\033\271\056\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\021\051\024\044\026\046" +
    "\027\050\030\056\031\034\032\041\035\303\036\042\037" +
    "\035\040\061\042\066\043\065\044\054\045\036\056\057" +
    "\057\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\146\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\051\026\152\032\072\033\157\034\312\056" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\021\051\024\044\026" +
    "\046\027\050\030\056\031\034\032\041\035\316\036\042" +
    "\037\035\040\061\042\066\043\065\044\054\045\036\056" +
    "\057\057\062\001\001\000\002\001\001\000\044\021\051" +
    "\024\044\026\046\027\050\030\056\031\034\032\041\035" +
    "\320\036\042\037\035\040\061\042\066\043\065\044\054" +
    "\045\036\056\057\057\062\001\001\000\002\001\001\000" +
    "\006\116\323\117\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\021" +
    "\051\024\044\026\046\027\050\030\056\031\034\032\041" +
    "\035\332\036\042\037\035\040\061\042\066\043\065\044" +
    "\054\045\036\056\057\057\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\346\001\001\000\044\021" +
    "\051\024\044\026\046\027\050\030\056\031\034\032\041" +
    "\035\347\036\042\037\035\040\061\042\066\043\065\044" +
    "\054\045\036\056\057\057\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\147" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\150\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\376\001\001\000\002\001\001\000\004\064\u0100\001\001" +
    "\000\004\021\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\u0111\001\001\000\004\021\u0106\001\001" +
    "\000\006\066\u010d\067\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\u0109\001\001\000\004\014\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0110\001\001\000\002\001\001\000\004\021\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u0118\016" +
    "\u0117\001\001\000\002\001\001\000\004\071\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u0179\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\u0170\001\001" +
    "\000\002\001\001\000\004\074\u0168\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u014a\001\001\000\002\001\001\000\004\022" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u0156\001\001\000\004\022\u0151\001\001\000\004\102" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u016e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u0184\020\u019c\001\001\000\002\001\001\000" +
    "\004\103\u0188\001\001\000\002\001\001\000\006\022\u018a" +
    "\023\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0196\001\001\000\004\104\u0194" +
    "\001\001\000\006\022\u018a\023\u0190\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\u018a\023\u0195\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\103\u0188\105\u0198" +
    "\001\001\000\002\001\001\000\004\022\u019a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u01a1\001\001\000\004\011\u01a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0221" +
    "\001\001\000\006\017\u0184\020\u0214\001\001\000\024\006" +
    "\012\007\030\010\016\011\u01a5\012\u01a8\013\015\014\011" +
    "\050\u01a6\051\u01a7\001\001\000\004\051\u0212\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\u020f\051\u0210" +
    "\001\001\000\044\021\051\024\044\026\046\027\u01ae\030" +
    "\056\031\034\032\041\036\u01ab\042\u01b3\043\065\044\054" +
    "\045\u01aa\052\u01b0\053\u01b1\054\u01b2\056\057\060\u01b5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\051\056\u020a\001\001\000\002\001\001\000" +
    "\022\021\051\024\044\026\046\027\u01ed\030\056\031\034" +
    "\032\072\056\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\136" +
    "\036\u01b8\001\001\000\002\001\001\000\044\021\051\024" +
    "\044\026\046\027\u01ae\030\056\031\034\032\041\036\u01ab" +
    "\042\u01b3\043\065\044\054\045\u01aa\052\u01b7\053\u01b1\054" +
    "\u01b2\056\057\060\u01b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\u01ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\021\051\024\044" +
    "\026\046\027\u01ae\030\056\031\034\032\041\036\u01ab\042" +
    "\u01b3\043\065\044\054\045\u01aa\052\u01be\053\u01b1\054\u01b2" +
    "\056\057\060\u01b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\137\u01c2\140\u01c3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\021\051\024\044\026\046\027\u01ae\030\056\031\034" +
    "\032\041\036\u01ab\042\u01b3\043\065\044\054\045\u01aa\052" +
    "\u01c6\053\u01b1\054\u01b2\056\057\060\u01b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\021" +
    "\051\024\044\026\046\027\050\030\056\031\034\032\041" +
    "\035\u01ca\036\042\037\035\040\061\042\066\043\065\044" +
    "\054\045\036\056\057\057\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\141\u01cf\001\001\000\002\001\001\000\044\021\051" +
    "\024\044\026\046\027\u01ae\030\056\031\034\032\041\036" +
    "\u01ab\042\u01b3\043\065\044\054\045\u01aa\052\u01d1\053\u01b1" +
    "\054\u01b2\056\057\060\u01b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\021\051\024\044\026\046\027\u01ae" +
    "\030\056\031\034\032\041\036\u01ab\042\u01b3\043\065\044" +
    "\054\045\u01aa\052\u01d8\053\u01b1\054\u01b2\056\057\060\u01b5" +
    "\001\001\000\004\143\u01d5\001\001\000\044\021\051\024" +
    "\044\026\046\027\u01ae\030\056\031\034\032\041\036\u01ab" +
    "\042\u01b3\043\065\044\054\045\u01aa\052\u01d6\053\u01b1\054" +
    "\u01b2\056\057\060\u01b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\145\u01da\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\021\051\024\044\026\046\027\u01ae\030" +
    "\056\031\034\032\041\036\u01ab\042\u01b3\043\065\044\054" +
    "\045\u01aa\052\u01e3\053\u01b1\054\u01b2\056\057\060\u01b5\001" +
    "\001\000\004\142\u01e0\001\001\000\044\021\051\024\044" +
    "\026\046\027\u01ae\030\056\031\034\032\041\036\u01ab\042" +
    "\u01b3\043\065\044\054\045\u01aa\052\u01e1\053\u01b1\054\u01b2" +
    "\056\057\060\u01b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\144\u01e5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\021\051\024\044\026\046\027" +
    "\u01ae\030\056\031\034\032\041\036\u01ab\042\u01b3\043\065" +
    "\044\054\045\u01aa\052\u01ef\053\u01b1\054\u01b2\056\057\060" +
    "\u01b5\001\001\000\044\021\051\024\044\026\046\027\u01ae" +
    "\030\056\031\034\032\041\036\u01ab\042\u01b3\043\065\044" +
    "\054\045\u01aa\052\u01f3\053\u01b1\054\u01b2\056\057\060\u01b5" +
    "\001\001\000\002\001\001\000\004\122\u01f1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\123\u01f5\124\u01f6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\021\051" +
    "\024\044\026\046\027\u01ae\030\056\031\034\032\041\036" +
    "\u01ab\042\u01b3\043\065\044\054\045\u01aa\052\u01fd\053\u01b1" +
    "\054\u01b2\056\057\060\u01b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0206\001\001\000\044\021\051\024" +
    "\044\026\046\027\u01ae\030\056\031\034\032\041\036\u01ab" +
    "\042\u01b3\043\065\044\054\045\u01aa\052\u0207\053\u01b1\054" +
    "\u01b2\056\057\060\u01b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u0211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0218\001\001\000\024\006\012\007\030\010" +
    "\016\011\u01a5\012\u01a8\013\015\014\011\050\u0217\051\u01a7" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\012\007\030\010\016\011\u01a5\012\u01a8\013\015\014\011" +
    "\050\u021a\051\u01a7\001\001\000\002\001\001\000\004\022" +
    "\u021e\001\001\000\024\006\012\007\030\010\016\011\u01a5" +
    "\012\u01a8\013\015\014\011\050\u021d\051\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\012\007\030" +
    "\010\016\011\u01a5\012\u01a8\013\015\014\011\050\u0220\051" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\012\007\030\010\016\011\u01a5\012\u01a8\013\015\014" +
    "\011\050\u0223\051\u01a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0228\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u022c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // writeString ::= WRITESTRING APAREN CCADENA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ')'");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // writeString ::= WRITESTRING APAREN error NT$55 CPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NT$55 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una cadena");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$55",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // writeString ::= WRITESTRING error NT$54 CCADENA CPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NT$54 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo '('");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$54",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // writeString ::= APAREN CCADENA error NT$53 CPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // NT$53 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'WRITESTRING");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO CDIGITO DO sentenciasSubprograma error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO ID DO sentenciasSubprograma error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO CDIGITO DO error NT$52 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$52 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO ID DO error NT$51 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$51 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO CDIGITO error NT$50 sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$50 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'DO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO ID error NT$49 sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$49 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'DO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO error NT$48 DO sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // NT$48 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador o un valor numerico"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion error NT$47 CDIGITO DO sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$47 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'TO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion error NT$46 ID DO sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$46 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada TO"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // sentenciasFORSubprograma ::= FOR error NT$45 TO ID DO sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$45 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia de asignacion"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sentenciasFORSubprograma ::= sentenciaAsignacion TO error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'FOR'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO DO sentencias error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID DO sentencias error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO DO error NT$44 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$44 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID DO error NT$43 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$43 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO error NT$42 sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$42 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'DO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID error NT$41 sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$41 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'DO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // sentenciasFOR ::= FOR sentenciaAsignacion TO error NT$40 DO sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$40 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador o un valor numerico"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // sentenciasFOR ::= FOR sentenciaAsignacion error NT$39 CDIGITO DO sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$39 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'TO'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // sentenciasFOR ::= FOR sentenciaAsignacion error NT$38 ID DO sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$38 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada TO"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // sentenciasFOR ::= FOR error NT$37 TO ID DO sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$37 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia de asignacion"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sentenciasFOR ::= sentenciaAsignacion TO error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'FOR'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma ELSE error NT$36 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$36 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN error NT$35 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$35 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN error NT$34 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$34 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // sentenciasIFSubprograma ::= IF THEN error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba una expresion"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma ELSE sentenciasSubprograma PCOMA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma PCOMA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sentenciasIFSubprograma ::= IF expresionCompuesta sentenciasSubprograma error NT$33 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$33 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Error, se esperaba la palabra reservada 'THEN'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // sentenciasIFSubprograma ::= expresionCompuesta error NT$32 sentenciasSubprograma END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$32 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'IF'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sentenciasIF ::= IF expresionCompuesta THEN sentencias ELSE error NT$31 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$31 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sentenciasIF ::= IF expresionCompuesta THEN error NT$30 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$30 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sentenciasIF ::= IF expresionCompuesta THEN error NT$29 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$29 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba una sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // sentenciasIF ::= IF THEN error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba una expresion"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sentenciasIF ::= IF expresionCompuesta THEN sentencias ELSE sentencias PCOMA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sentenciasIF ::= IF expresionCompuesta THEN sentencias PCOMA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'END'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentenciasIF ::= IF expresionCompuesta sentencias error NT$28 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$28 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Error, se esperaba la palabra reservada 'THEN'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentenciasIF ::= expresionCompuesta error NT$27 sentencias END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$27 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Error se esperaba la palabra reservada 'IF'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL NT$26 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$26 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor para la sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL NT$25 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$25 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor para la sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaAsignacion ::= accesoVector DOSPUNTOS error NT$24 valorSentencia PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo '='"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentenciaAsignacion ::= ID DOSPUNTOS NT$23 valorSentencia PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo '='"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentenciaAsignacion ::= accesoVector IGUAL error NT$22 valorSentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ':'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentenciaAsignacion ::= ID IGUAL error NT$21 valorSentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ':'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentenciaAsignacion ::= DOSPUNTOS error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en el identificador de la sentencia"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentencias ::= tipoSentencia error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error, se esperaba el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaracionVariable ::= ID DOSPUNTOS tipoDato error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaracionVariable ::= ID COMA error NT$20 DOSPUNTOS tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador valido"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracionVariable ::= ID DOSPUNTOS error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba un identificador o un tipo primitivo"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaracionVariable ::= ID error NT$19 tipoDato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ':'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaracionVariable ::= error NT$18 tipoDato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador valido"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declaracionTipo ::= ID COMA error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'VAR'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracionTipo ::= ID DOSPUNTOS error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'VAR'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF error NT$17 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un tipo primitivo"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR error NT$16 tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada  'OF'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO error NT$15 OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ']'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS error NT$14 CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor numerico"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO error NT$13 CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaban los simbolos '..'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // declaracionTipo ::= ID IGUAL ARRAY ACOR error NT$12 PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor numerico"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // declaracionTipo ::= ID IGUAL ARRAY error NT$11 CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo '['"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // declaracionTipo ::= ID IGUAL error NT$10 ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'ARRAY'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // declaracionTipo ::= ID error NT$9 ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se el simbolo '='"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // declaracionTipo ::= IGUAL error NT$8 ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaracionConstante ::= ID IGUAL ARRAY error NT$7 declaracionConstante 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'TYPE'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declaracionConstante ::= ID IGUAL error NT$6 valorConstante declaracionConstante 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declaracionConstante ::= ID IGUAL error NT$5 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor valido para la constante"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declaracionConstante ::= ID error NT$4 valorConstante PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo '='"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracionConstante ::= IGUAL error NT$3 valorConstante PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // seccionConstantes ::= declaracionConstantes error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada 'CONST'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // principio ::= MODULE ID error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba el simbolo ';'"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // principio ::= MODULE error NT$2 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un identificador"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // principio ::= ID error NT$1 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$1 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Se esperaba la palabra reservada MODULE"); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // writeInt ::= WRITEINT APAREN accesoVector CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // writeInt ::= WRITEINT APAREN llamadaFuncion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // writeInt ::= WRITEINT APAREN expresionCompuesta CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // writeInt ::= WRITEINT APAREN CDIGITO CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // writeInt ::= WRITEINT APAREN ID CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeInt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // writeString ::= WRITESTRING APAREN CCADENA CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeString",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciasWrite ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciasWrite ::= writeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciasWrite ::= writeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasWrite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciasFOR ::= FOR sentenciaAsignacion TO CDIGITO DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentenciasFOR ::= FOR sentenciaAsignacion TO ID DO sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentenciasIF ::= IF expresionCompuesta THEN sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciasIF ::= IF expresionCompuesta THEN sentencias ELSE sentencias END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valorSentencia ::= valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valorSentencia ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valorSentencia ::= expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaAsignacion ::= accesoVector DOSPUNTOS IGUAL valorSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaAsignacion ::= ID DOSPUNTOS IGUAL valorSentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipoSentencia ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipoSentencia ::= sentenciasWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipoSentencia ::= sentenciasFOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipoSentencia ::= sentenciasIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipoSentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias ::= tipoSentencia PCOMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencias ::= tipoSentencia PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo ::= BEGIN END ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo ::= BEGIN sentencias END ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // llamadaProcedimiento ::= ID APAREN listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamadaProcedimiento ::= ID APAREN CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // llamadaProcedimiento ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // llamadaFuncion ::= ID APAREN llamadaFuncion COMA listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llamadaFuncion ::= ID APAREN listaValores CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listaValores ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listaValores ::= valorExpresion COMA listaValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // listaValores ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // accesoVector ::= ID ACOR accesoVector CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // accesoVector ::= ID ACOR ID CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // accesoVector ::= ID ACOR CDIGITO CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valorExpresion ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valorExpresion ::= valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorExpresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // corchetes ::= ACOR expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // corchetes ::= ACOR corchetes expresion CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchetes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parentesis ::= APAREN expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parentesis ::= APAREN parentesis expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= corchetes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresionCompuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= valorExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionCompuesta ::= ACOR expresion operador CCOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionCompuesta ::= APAREN expresion operador expresion CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionCompuesta ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompuesta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipoDato ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipoDato ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracionVariable ::= ID COMA declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionVariable ::= ID DOSPUNTOS tipoDato PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracionVariable ::= ID DOSPUNTOS tipoDato CPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracionVariables ::= declaracionVariable declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // seccionVariables ::= VAR declaracionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS ID CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracionTipo ::= ID IGUAL ARRAY ACOR ID PUNTOS ID CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracionTipo ::= ID IGUAL ARRAY ACOR ID PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seccionTipos ::= TYPE declaracionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valorSimple ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSimple",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valorSimple ::= valorConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorSimple",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valorConstante ::= CDIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valorConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valorConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionConstante ::= ID IGUAL valorConstante PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionConstantes ::= declaracionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seccionConstantes ::= CONST declaracionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaDeclaraciones ::= seccionConstantes seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaDeclaraciones ::= seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaDeclaraciones ::= seccionConstantes seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaDeclaraciones ::= seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaDeclaraciones ::= seccionConstantes seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaDeclaraciones ::= seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaDeclaraciones ::= seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO CDIGITO DO sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciasFORSubprograma ::= FOR sentenciaAsignacion TO ID DO sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFORSubprograma",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciasIFSubprograma ::= IF expresionCompuesta THEN sentenciasSubprograma ELSE sentenciasSubprograma END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasIFSubprograma",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoSentenciaSubprograma ::= RETURN valorSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoSentenciaSubprograma ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoSentenciaSubprograma ::= sentenciasWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoSentenciaSubprograma ::= sentenciasFORSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoSentenciaSubprograma ::= sentenciasIFSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoSentenciaSubprograma ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSentenciaSubprograma",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciasSubprograma ::= tipoSentenciaSubprograma PCOMA sentenciasSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasSubprograma",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciasSubprograma ::= tipoSentenciaSubprograma PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasSubprograma",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoSubprograma ::= BEGIN END ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoSubprograma",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoSubprograma ::= BEGIN sentenciasSubprograma END ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoSubprograma",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion ::= ID APAREN declaracionVariables DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= ID APAREN CPAREN DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= ID DOSPUNTOS tipoPrimitivo PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimiento ::= ID APAREN declaracionVariables PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimiento ::= ID APAREN CPAREN PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimiento ::= ID PCOMA subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionSubprogramas ::= PROCEDURE procedimiento seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionSubprogramas ::= PROCEDURE funcion seccionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionSubprogramas ::= PROCEDURE procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccionSubprogramas ::= PROCEDURE funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subprograma ::= cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // subprograma ::= seccionSubprogramas cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subprograma ::= listaDeclaraciones cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // subprograma ::= listaDeclaraciones seccionSubprogramas cuerpoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // final ::= cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // final ::= seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // final ::= listaDeclaraciones cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // final ::= listaDeclaraciones seccionSubprogramas cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principio ::= MODULE ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= principio final 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

