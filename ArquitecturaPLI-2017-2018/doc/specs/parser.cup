package compiler.syntax;

// Declaraci�n de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaraci�n del c�digo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaraci�n de terminales (Ejemplo)

terminal Token MENOS;
terminal Token POR;
terminal Token MAYOR;
terminal Token IGUAL;
terminal Token AND;
terminal Token ARRAY;
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONST;
terminal Token DO;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FOR;
terminal Token IF;
terminal Token INTEGER;
terminal Token MODULE;
terminal Token NOT;
terminal Token OF;
terminal Token OR;
terminal Token PROCEDURE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TO;
terminal Token TRUE;
terminal Token TYPE;
terminal Token VAR;
terminal Token WHILE;
terminal Token WRITESTRING;
terminal Token WRITEINT;
terminal Token WRITELN;
terminal Token ID;
terminal Token CDIGITO;
terminal Token CCADENA;
terminal Token APAREN;
terminal Token CPAREN;
terminal Token ACOR;
terminal Token CCOR;
terminal Token COMA;
terminal Token PCOMA;
terminal Token DOSPUNTOS;
terminal Token PUNTOS;
terminal Token PUNTO;
// ...


// Declaraci�n de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal 			principio;
non terminal			medio;
non terminal			final;
non terminal 			seccionConstantes;
non terminal			seccionTipos;
non terminal			seccionVariables;
non terminal			seccionSubprogramas;
non terminal			listaDeclaraciones;
non terminal			declaracionConstantes;
non terminal			declaracionConstante;
non terminal			declaracionTipos;
non terminal			declaracionTipo;
non terminal			declaracionVariable;
non terminal			declaracionVariables;
non terminal			valorLiteral;
non terminal			tipoPrimitivo;
non terminal			tipoDato;
non terminal			listaId;
non terminal			expresiones;
non terminal			expresion;
non terminal 			operador;
non terminal 			valorExpresion;
non terminal			expresionCompuesta;
non terminal			pDerecha;
non terminal			parentesis;
non terminal			corchetes;
non terminal			accesoVector;
non terminal			llamadaFuncion;
non terminal			listaValores;
non terminal			sentencias;
non terminal			sentenciaAsignacion;
non terminal			sentenciasIF;
non terminal			sentenciasFOR;
non terminal			cuerpo;
non terminal			sentenciasWrite;
non terminal			writeString;
non terminal			writeInt;
non terminal			llamadaProcedimiento;
non terminal			procedimiento;
non terminal			funcion;
// ...


// Declaraci�n de relaciones de precedencia
precedence left PUNTO, APAREN, CPAREN, ACOR, CCOR;
precedence right NOT;
precedence left POR, AND;
precedence left MENOS, OR;
precedence left MAYOR, IGUAL;

// ...

// Declaraci�n de reglas de producci�n


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};

axiom ::= principio medio ;

principio ::= MODULE ID PCOMA ;

medio ::=  listaDeclaraciones seccionSubprogramas cuerpo | listaDeclaraciones cuerpo | seccionSubprogramas cuerpo | cuerpo;

seccionSubprogramas::=  funcion | procedimiento | funcion seccionSubprogramas | procedimiento seccionSubprogramas;

procedimiento::= PROCEDURE ID PCOMA medio | PROCEDURE ID APAREN CPAREN PCOMA medio | PROCEDURE ID APAREN declaracionVariables CPAREN PCOMA medio; 
	

listaDeclaraciones ::= seccionConstantes | seccionTipos | seccionConstantes seccionTipos | seccionVariables | seccionConstantes seccionVariables | seccionTipos seccionVariables | seccionConstantes seccionTipos seccionVariables;

seccionConstantes ::= CONST declaracionConstantes;

declaracionConstantes ::= declaracionConstante declaracionConstantes| declaracionConstante ;

declaracionConstante ::= ID IGUAL valorLiteral PCOMA;

valorLiteral ::= TRUE | FALSE | CDIGITO;

seccionTipos ::= TYPE declaracionTipos;

declaracionTipos ::= declaracionTipo | declaracionTipo declaracionTipos;

declaracionTipo ::= ID IGUAL ARRAY ACOR CDIGITO PUNTOS CDIGITO CCOR OF tipoPrimitivo PCOMA;

tipoPrimitivo ::= INTEGER | BOOLEAN;


seccionVariables ::= VAR declaracionVariables;

declaracionVariables ::= declaracionVariable PCOMA | declaracionVariable PCOMA declaracionVariables;
declaracionVariable ::= ID DOSPUNTOS tipoDato | ID COMA declaracionVariable;
tipoDato::= ID | tipoPrimitivo;


// expresiones y aceso a vectores
expresionCompuesta::= expresion operador expresion | APAREN expresion operador expresion CPAREN | ACOR expresion operador CCOR;
expresion::= valorExpresion | expresionCompuesta | parentesis | corchetes;
parentesis::= APAREN parentesis expresion CPAREN | APAREN expresion CPAREN;
corchetes::= ACOR corchetes expresion CCOR | ACOR expresion CCOR;
operador ::= POR | AND | MENOS | OR | MAYOR | IGUAL;
valorExpresion ::= ID | valorLiteral | accesoVector;
accesoVector::= ID ACOR CDIGITO CCOR | ID ACOR ID CCOR;

llamadaFuncion::= ID APAREN listaValores CPAREN | ID APAREN llamadaFuncion COMA listaValores CPAREN;
listaValores::= valorExpresion | valorExpresion COMA listaValores | llamadaFuncion ;

llamadaProcedimiento::= ID PCOMA | ID APAREN CPAREN PCOMA | ID APAREN listaValores CPAREN PCOMA;


cuerpo::= BEGIN sentencias;
sentencias::= sentenciaAsignacion PCOMA |sentenciasIF PCOMA  |  sentenciasIF PCOMA sentencias | sentenciaAsignacion PCOMA sentencias | sentenciasFOR PCOMA | sentenciasFOR PCOMA sentencias 
				| sentenciasWrite PCOMA | sentenciasWrite PCOMA sentencias | llamadaProcedimiento | llamadaProcedimiento sentencias;


sentenciaAsignacion::= ID DOSPUNTOS IGUAL expresionCompuesta | 
						 ID DOSPUNTOS IGUAL llamadaFuncion |
						 ID DOSPUNTOS IGUAL valorLiteral	|
						 ID DOSPUNTOS IGUAL ID 				|
						 accesoVector DOSPUNTOS IGUAL expresionCompuesta|
						 accesoVector DOSPUNTOS IGUAL llamadaFuncion |
						 accesoVector DOSPUNTOS IGUAL valorLiteral |
						 accesoVector DOSPUNTOS IGUAL ID;

sentenciasIF::= IF expresionCompuesta THEN sentencias ELSE sentencias END 
				| IF expresionCompuesta THEN sentencias END ;

//Vamos a considerar que la expresion de comienzo de un for es cualquier sentecia de asignación de las antes expuestas

sentenciasFOR::= FOR sentenciaAsignacion TO ID DO sentencias END | FOR sentenciaAsignacion TO CDIGITO DO sentencias END;

sentenciasWrite::= writeString | writeInt | WRITELN;

writeString::= WRITESTRING APAREN CCADENA CPAREN;
writeInt::= WRITEINT APAREN ID CPAREN | WRITEINT APAREN CDIGITO CPAREN;


